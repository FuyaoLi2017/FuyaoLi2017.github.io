<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fuyao Li</title>
  
  <subtitle>UC Irvine, Department of Computer Science, Master of Science in Networked Systems</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fuyaoli.me/"/>
  <updated>2019-05-09T19:20:15.339Z</updated>
  <id>http://fuyaoli.me/</id>
  
  <author>
    <name>Fuyao Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode Check In</title>
    <link href="http://fuyaoli.me/2019/05/09/leetcode-everyday/"/>
    <id>http://fuyaoli.me/2019/05/09/leetcode-everyday/</id>
    <published>2019-05-09T18:01:42.000Z</published>
    <updated>2019-05-09T19:20:15.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Check-in-Leetcode-submissions"><a href="#Check-in-Leetcode-submissions" class="headerlink" title="Check in Leetcode submissions"></a>Check in Leetcode submissions</h1><p>Today is May 9th, start from today, I will solve at least two leetcode questions every day and mark in right here. All submission will be uploaded to my Github repo.<br><a href="https://github.com/FuyaoLi2017/leetcode" target="_blank" rel="noopener">!leetcode submission repo link</a></p><p>For important questions and algorithms, I will try my best to summary it and post articles in my blog.</p><h2 id="May-9th"><a href="#May-9th" class="headerlink" title="May 9th"></a>May 9th</h2><h3 id="1-leetcode-58-Length-of-Last-Word"><a href="#1-leetcode-58-Length-of-Last-Word" class="headerlink" title="1. leetcode 58: Length of Last Word"></a>1. leetcode 58: Length of Last Word</h3><ul><li>link: <a href="https://leetcode.com/problems/length-of-last-word/" target="_blank" rel="noopener">https://leetcode.com/problems/length-of-last-word/</a></li><li>submission: <a href="https://github.com/FuyaoLi2017/leetcode/blob/master/String/leetcode_058_LengthofLastWord.java" target="_blank" rel="noopener">https://github.com/FuyaoLi2017/leetcode/blob/master/String/leetcode_058_LengthofLastWord.java</a></li></ul><h3 id="2-leetcode-59-Spiral-Matrix-II"><a href="#2-leetcode-59-Spiral-Matrix-II" class="headerlink" title="2. leetcode 59: Spiral Matrix II"></a>2. leetcode 59: Spiral Matrix II</h3><ul><li>link: <a href="https://leetcode.com/problems/spiral-matrix-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/spiral-matrix-ii/</a></li><li>submission: <a href="https://github.com/FuyaoLi2017/leetcode/blob/master/Array/leetcode_059_SpiralMatrixII.java" target="_blank" rel="noopener">https://github.com/FuyaoLi2017/leetcode/blob/master/Array/leetcode_059_SpiralMatrixII.java</a></li></ul><h3 id="3-leetcode-61-Rotate-List"><a href="#3-leetcode-61-Rotate-List" class="headerlink" title="3. leetcode 61: Rotate List"></a>3. leetcode 61: Rotate List</h3><ul><li>link: <a href="https://leetcode.com/problems/rotate-list/" target="_blank" rel="noopener">https://leetcode.com/problems/rotate-list/</a></li><li>submission: <a href="https://github.com/FuyaoLi2017/leetcode/blob/master/LinkedList/leetcode_061_RotateList.java" target="_blank" rel="noopener">https://github.com/FuyaoLi2017/leetcode/blob/master/LinkedList/leetcode_061_RotateList.java</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Check-in-Leetcode-submissions&quot;&gt;&lt;a href=&quot;#Check-in-Leetcode-submissions&quot; class=&quot;headerlink&quot; title=&quot;Check in Leetcode submissions&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://fuyaoli.me/categories/Leetcode/"/>
    
    
      <category term="Computer Science" scheme="http://fuyaoli.me/tags/Computer-Science/"/>
    
      <category term="algorithm" scheme="http://fuyaoli.me/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL-4 Building A GraphQL API</title>
    <link href="http://fuyaoli.me/2019/05/01/graphql-4/"/>
    <id>http://fuyaoli.me/2019/05/01/graphql-4/</id>
    <published>2019-05-01T22:30:20.000Z</published>
    <updated>2019-05-01T22:31:43.214Z</updated>
    
    <content type="html"><![CDATA[<p>In this chapter, we discuss the features of a GraphQL API and mechanics behind it.</p><h2 id="4-1-GraphQL-API-mechanics"><a href="#4-1-GraphQL-API-mechanics" class="headerlink" title="4.1 GraphQL API mechanics"></a>4.1 GraphQL API mechanics</h2><p>All GraphQL APIs offer a number features that we need to understand in order build GraphQL APIs. The heart of this configuration is the GraphQL schema with its type definition.</p><ol><li>GraphQL Validation: Any request that is received by a GraphQL API, is first syntactically validated against the GraphQL SCHEMA.</li><li>GraphQL Execution: After the request has been validated, it needs to be interpreted and execute by the server to create a response.</li></ol><ul><li>Execution of queries: The graphQL SERVER returns a result that structurally mirrors the shape of the requested query. Before sending to the client, the server serializes the result, typically in JSON format.<ul><li>Creating a response to a query is actually a traversal of the graph.</li><li>Resolver functions: the resolver function is called recursively. For each of the subgraphs produced as output. A subgraph is an instance of a certain type. When such a subgraph is processed, the resolver function of its corresponding type is called. If the resolver function for a certain subgraph produces a scalar value like a string or number, the recursion terminates in that branch. The resolver function receive three arguments.<ul><li>obj: the parent object of the fields being resolved(graphQL query/mutation/subscription).(often <code>null</code> or left out).</li><li>args: the arguements provided to the fields in the graphQL query/mutation/subscription.</li><li>context: holds important contextual information, such as authenticated user and access to a database.</li></ul></li><li>Execution of subscription: There is no confirmation response. A response is only generated when the event actually occurs. The best practice to realize this bidirectional communication via teh webSocket protocol.</li></ul></li></ul><h2 id="4-2-GraphQL-server-architecture"><a href="#4-2-GraphQL-server-architecture" class="headerlink" title="4.2 GraphQL server architecture"></a>4.2 GraphQL server architecture</h2><h3 id="4-2-1-Green-Field-case-without-involving-any-existing-legacy-systems"><a href="#4-2-1-Green-Field-case-without-involving-any-existing-legacy-systems" class="headerlink" title="4.2.1 Green Field case: without involving any existing legacy systems"></a>4.2.1 Green Field case: without involving any existing legacy systems</h3><p>There can be multiple API endpoints lying above business logic.<br>RPC APIs, REST APIs, GraphQL APIs =&gt; Business logic =&gt; DB</p><h3 id="4-2-2-Legacy-case"><a href="#4-2-2-Legacy-case" class="headerlink" title="4.2.2 Legacy case"></a>4.2.2 Legacy case</h3><p>Cases we need to deal with existing legacy services and databases.</p><h2 id="4-3-GraphQL-API-design-methodology"><a href="#4-3-GraphQL-API-design-methodology" class="headerlink" title="4.3 GraphQL API design methodology"></a>4.3 GraphQL API design methodology</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this chapter, we discuss the features of a GraphQL API and mechanics behind it.&lt;/p&gt;
&lt;h2 id=&quot;4-1-GraphQL-API-mechanics&quot;&gt;&lt;a href=&quot;#4-1-G
      
    
    </summary>
    
      <category term="GraphQL" scheme="http://fuyaoli.me/categories/GraphQL/"/>
    
    
      <category term="ardent academy" scheme="http://fuyaoli.me/tags/ardent-academy/"/>
    
      <category term="Computer Science" scheme="http://fuyaoli.me/tags/Computer-Science/"/>
    
      <category term="JavaScript" scheme="http://fuyaoli.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL-3 GraphQL query language</title>
    <link href="http://fuyaoli.me/2019/04/19/graphql-3/"/>
    <id>http://fuyaoli.me/2019/04/19/graphql-3/</id>
    <published>2019-04-19T22:45:24.000Z</published>
    <updated>2019-05-01T22:29:58.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-Patterns"><a href="#3-1-Patterns" class="headerlink" title="3.1 Patterns"></a>3.1 Patterns</h2><p>GraphQL queries consist of one or more patterns which are matched agianst the big graph containing all the data on the server.</p><p>A pattern is expressed in terms of the relationships between objects and the fields the objects contain.</p><p>Multi-level hierarchies can be built because a field can also be an object which contains its own fields.</p><h2 id="3-2-GraphQL-methods"><a href="#3-2-GraphQL-methods" class="headerlink" title="3.2 GraphQL methods"></a>3.2 GraphQL methods</h2><ol><li><strong>query</strong> is used for retrieval, for reading data(see 3.3)</li><li><strong>mutation</strong> is used for modification, for writing data (see 3.4)</li><li><strong>subscription</strong> is used for notification of changed data (see 3.5)</li></ol><h2 id="3-3-GraphQL-Query"><a href="#3-3-GraphQL-Query" class="headerlink" title="3.3 GraphQL Query"></a>3.3 GraphQL Query</h2><p>To read data with graphQL, the client uses the query method.</p><p>In the pattern of this query, the client has to explicitly specify all the object and fields it is interested in.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">    books &#123;</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Executing the query might result in the following data, which is returned in JSON format.</li><li>For graphQL, query and response have the same shape. The query is comparable to a template in a template language.</li><li>Just like functions in JS, queries can be anonymous or named. If a query is given a name, it allows us identify it easier later on.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query myBookQuery &#123;</span><br><span class="line">    books &#123;</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-1-Objects"><a href="#3-3-1-Objects" class="headerlink" title="3.3.1 Objects"></a>3.3.1 Objects</h3><ul><li>Inside the query method, one or more objects can be retrieved.</li><li>An object can not be retrieved without explicitly specifying the fields that should be returned.</li></ul><h3 id="3-3-2-Fields"><a href="#3-3-2-Fields" class="headerlink" title="3.3.2 Fields"></a>3.3.2 Fields</h3><ul><li>Objects have fields of their own, primitives do not.</li><li>The types of the fields are objects, array or a primitive type.</li><li><p>The query language does not ditinguish between lists and single elements, such as primitives or objects. If the fields is a list, its fields are actually the fields of each element in the list.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">    books &#123;</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>If field has further fields itself, we can create a new level of nesting. The result tree gets deeper.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">    books &#123;</span><br><span class="line">        title</span><br><span class="line">        author [</span><br><span class="line">            name</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-3-Arguments"><a href="#3-3-3-Arguments" class="headerlink" title="3.3.3 Arguments"></a>3.3.3 Arguments</h3><ul><li>An argument is used to put constraints on objects. Only objects which satisfy the constraints imposed by the argument are included in the result.</li><li>An argument in GraphQL is comparable to a <strong>WHERE</strong> in SQL.</li><li>In graphQL, the arguments are identified and passed in by their name.(id in our example)</li></ul><h3 id="3-3-4-Alias"><a href="#3-3-4-Alias" class="headerlink" title="3.3.4 Alias"></a>3.3.4 Alias</h3><ul><li>To avoid name confilct, we cna rename a fields with an alias.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">    book_by_id (id:&quot;1234&quot;) &#123;</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">    second_book: book_by_id (id:&quot;5678&quot;) &#123;</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-5-Fragments"><a href="#3-3-5-Fragments" class="headerlink" title="3.3.5 Fragments"></a>3.3.5 Fragments</h3><ul><li>Some queries contain repeating elements. In this case, it is tedious to get consistent in the first palce and tedious to maintain consistency.</li><li>Repeating elements of a query can be factored out into socalled fragments.</li><li><p>Fragments need to be defined once (using <strong>fragment</strong> keyword) and can be applied mulitple times (using the … keyword)</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>We can rewrite the previous example with the following code sample.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">    book_by_id (id:&quot;1234&quot;) &#123;</span><br><span class="line">        ...bookinfo</span><br><span class="line">    &#125;</span><br><span class="line">    second_book: book_by_id (id:&quot;5678&quot;) &#123;</span><br><span class="line">        ...bookinfo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fragment bookinfo on Book &#123;</span><br><span class="line">    title</span><br><span class="line">    author &#123;</span><br><span class="line">        name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Note, that a fragment is defined for a specific type. (see section 2.3),in our example, the fragment is specific for a Book.</p></li></ul><h3 id="3-3-6-Inline-Fragments"><a href="#3-3-6-Inline-Fragments" class="headerlink" title="3.3.6 Inline Fragments"></a>3.3.6 Inline Fragments</h3><ul><li>Inline fragment are used to distinguish different types. It is similar to an <strong>instanceof</strong> operator in OOP languages.</li><li>Inline fragments are for ploymorphism, i.e. for <strong>interface</strong> and <strong>union</strong> types.</li><li>With inline fragments, we can check the type of an object at runtime.</li></ul><h4 id="Example-of-using-inline-fragment-in-interface"><a href="#Example-of-using-inline-fragment-in-interface" class="headerlink" title="Example of using inline fragment in interface"></a>Example of using inline fragment in interface</h4><ul><li>To access the private-owned fields of implementation type of interfaces. We need to use inline fragments.</li><li><p>We first define an interface and two implementation types.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface Document &#123;</span><br><span class="line">    title: String,</span><br><span class="line">    text: String,</span><br><span class="line">    authors: [Author]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Book implements Document &#123;</span><br><span class="line">    id: ID!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Article implements Document &#123;</span><br><span class="line">    magazine: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Query &#123;</span><br><span class="line">    readingList: [Document]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>If we want to access the id field for Book or magazine field for article, we need to specify which type it really belongs to, we need to use inline fragment in this case.</p></li><li><p>The query format should be as follows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">    readingList &#123;</span><br><span class="line">        title</span><br><span class="line">        text</span><br><span class="line">        authors&#123;</span><br><span class="line">            name</span><br><span class="line">        &#125;</span><br><span class="line">        ... on Book &#123;</span><br><span class="line">            id</span><br><span class="line">        &#125;</span><br><span class="line">        ... on Article &#123;</span><br><span class="line">            magazine</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>For interfaces, we use use inline fragments to access additional fields.</p></li><li>For union types, since a union in general share no fields. Inline fragment have to be used for accessing any fields in a union.</li></ul><h3 id="3-3-7-Variables"><a href="#3-3-7-Variables" class="headerlink" title="3.3.7 Variables"></a>3.3.7 Variables</h3><ul><li>Variables can be used to pass different values into a query. When this value needs to be changed, the query itself can stay as it is.</li><li><p>Format <code>{$variable name}: {type of the bookID}[!,nothing(means whether this is a required parameter)] [= default value]</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query getSpecificBook ($BookID: String = &quot;1234&quot;) &#123;</span><br><span class="line">    book_by_id (id: $bookID) &#123;</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Variable need to have a type (primitive or object type)</p></li></ul><h3 id="3-3-8-Directives"><a href="#3-3-8-Directives" class="headerlink" title="3.3.8 Directives"></a>3.3.8 Directives</h3><ul><li>Directives can be used to dynamically include or exclude a part of a query.</li><li>Dynamically means depending on the value of boolean variable. This boolean variable has to be decleared just like any other variables.</li><li>There are two types of directives: one to include (@include keyword) a part of the query and one to exclude (@skip keywords) a part of the query.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">query getBooks($flag: boolean) &#123;</span><br><span class="line">    books&#123;</span><br><span class="line">        title</span><br><span class="line">        id @include(if: $flag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>The above examples includes the id fields only if the value <code>$flag</code> is <code>true</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">query getBooks($flag: boolean) &#123;</span><br><span class="line">    books&#123;</span><br><span class="line">        title</span><br><span class="line">        id @skip(if: $flag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above example is the reverse meaning for the first example.</p><h2 id="3-4-GraphQL-mutations"><a href="#3-4-GraphQL-mutations" class="headerlink" title="3.4 GraphQL mutations"></a>3.4 GraphQL mutations</h2><ul><li>The mutation method is used for modifying, adding or writing data on the server with GraphQL.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mutation &#123;</span><br><span class="line">    addBook (title: &quot;New Book&quot;) &#123;</span><br><span class="line">        id</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-5-GraphQL-Subscirption"><a href="#3-5-GraphQL-Subscirption" class="headerlink" title="3.5 GraphQL Subscirption"></a>3.5 GraphQL Subscirption</h2><ul><li>Modern clients need to get near real-time updates that get triggered when something changes on the server.</li><li>REST does not provide any built-in support for such notifications from the server; thus notifications are often realized by polling or by webhooks. You can refer more details about webhooks in the below resources.</li></ul><blockquote><p>Book, Webhooks - Events for REST APIs</p></blockquote><blockquote><p><a href="https://sendgrid.com/blog/whats-webhook/" target="_blank" rel="noopener">https://sendgrid.com/blog/whats-webhook/</a></p></blockquote><ul><li>With polling, the client periodically sends requests to the server. The client usually needs to poll on an endpoint that returns a list of elements and compares the retrieved list against the previously retrieved list in order to find the new elements.(expensive operation)</li><li>With webhooks, the server calls the client, whenever the resources becomes available. To set this up, the client first needs to register an endpoint that gets called by the server. The client needs to be able to expose this endpoint that can receive the events.</li></ul><h3 id="GraphQL-implementation"><a href="#GraphQL-implementation" class="headerlink" title="GraphQL implementation"></a>GraphQL implementation</h3><ul><li>GraphQL offers subscriptions as a built-in mechanism for realizing notifications.</li><li><p>First step: client need to send a subscription request to the graphQL API. The request specfies both the event to observe and the data.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">subscription &#123;</span><br><span class="line">    bookAdded &#123;</span><br><span class="line">        id</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>When to trigger?</p><ul><li>In most cases, notification is triggered by a modification of the data inside the graph, i.e. mutation. This means an event handler needs to be installed inside the implementation of the mutation.</li><li>In rare cases, notifcation can be triggered by an external event, which is direclty accessible inside the graph or only accessible in aggregated form. An example is sensor data, of which a single measurement may be used as a trigger, whereas the graph only contains aggredated sensor data and no single measurements.</li></ul></li></ul><h2 id="I-still-have-some-questions-regarding-how-to-implement-the-Subscriptions-with-GraphQL-Remaining-to-be-explored"><a href="#I-still-have-some-questions-regarding-how-to-implement-the-Subscriptions-with-GraphQL-Remaining-to-be-explored" class="headerlink" title="I still have some questions regarding how to implement the Subscriptions with GraphQL! Remaining to be explored!"></a>I still have some questions regarding how to implement the Subscriptions with GraphQL! Remaining to be explored!</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-1-Patterns&quot;&gt;&lt;a href=&quot;#3-1-Patterns&quot; class=&quot;headerlink&quot; title=&quot;3.1 Patterns&quot;&gt;&lt;/a&gt;3.1 Patterns&lt;/h2&gt;&lt;p&gt;GraphQL queries consist of one
      
    
    </summary>
    
      <category term="GraphQL" scheme="http://fuyaoli.me/categories/GraphQL/"/>
    
    
      <category term="ardent academy" scheme="http://fuyaoli.me/tags/ardent-academy/"/>
    
      <category term="Computer Science" scheme="http://fuyaoli.me/tags/Computer-Science/"/>
    
      <category term="JavaScript" scheme="http://fuyaoli.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL-2 GraphQL Schema Language</title>
    <link href="http://fuyaoli.me/2019/04/14/graphql-2/"/>
    <id>http://fuyaoli.me/2019/04/14/graphql-2/</id>
    <published>2019-04-15T02:57:36.000Z</published>
    <updated>2019-04-19T22:45:48.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GraphQL-Type-System"><a href="#GraphQL-Type-System" class="headerlink" title="GraphQL Type System"></a>GraphQL Type System</h2><p>GraphQL have strong type systems. A field can be amrked with an exclamation mark ! to indicate that the field is obligatory (will not be null). Otherwise, it will be nillable (optional fields).</p><ul><li>During execution/resolutoin of a query, the type system helps to determine what to do next.</li><li>When crafting queries, the introspection mechanism provided through the type system, allows us to do syntax directly editing and guide us with respect to what is possible and available.</li></ul><h2 id="Root-types"><a href="#Root-types" class="headerlink" title="Root types"></a>Root types</h2><p>Root types can be used as the starting point for a certain operation.</p><ul><li>Query</li><li>Mutation</li><li>Subscription<h3 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h3>Every graphQL implementation must ahve define a query and a mutation and subscription can be optional.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type Query &#123;</span><br><span class="line">    books: [Book]</span><br><span class="line">    book(title:String!): Book</span><br><span class="line">    book_by_id(id:ID!):Book</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Mutation &#123;</span><br><span class="line">    addBook(title: String!): Book</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Subscription &#123;</span><br><span class="line">    bookAdded: Book</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Scalar-Types"><a href="#Scalar-Types" class="headerlink" title="Scalar Types"></a>Scalar Types</h2><h3 id="built-in-GraphQL-scalar-types"><a href="#built-in-GraphQL-scalar-types" class="headerlink" title="built-in GraphQL scalar types"></a>built-in GraphQL scalar types</h3><ul><li>int</li><li>float</li><li>boolean</li><li>String</li><li>ID (used uniquely identify an object)</li></ul><h3 id="Custom-scalar-types"><a href="#Custom-scalar-types" class="headerlink" title="Custom scalar types"></a>Custom scalar types</h3><ul><li>Isbn (example)</li><li>[Author] (square brackets represent a list of things)</li></ul><h2 id="Array-representation"><a href="#Array-representation" class="headerlink" title="Array representation"></a>Array representation</h2><ul><li>Used to express a list of objects</li><li>[int]</li><li>[Book]</li></ul><h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><p>An enum has a limited set of values it can possibly to take on.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum trafficLight &#123;</span><br><span class="line">    RED</span><br><span class="line">    GREEN</span><br><span class="line">    YELLOW</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><ul><li><p>An interface is similar to a type definition, it defines a list of fields, but it can’t be instantiated.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface Document &#123;</span><br><span class="line">    title: String</span><br><span class="line">    text: String</span><br><span class="line">    authors: [Author]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>A regular type that implements the interface can extend the interface.</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Book implements Document &#123;</span><br><span class="line">    id: ID!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The implementing type automatically contains the fields defined in the interface, they don’t need to be mentioned explicitly.</li><li>To access the additional fields of a type implementing an interface in a query, we always need to make a distinction by type using inline fragments.(refer to section3.3.6)</li></ul><h2 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h2><ul><li>A <em>Union</em> is a common type for serveral defining types. If an object is of a union type, it could be any of it s defining types.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union Product = Book | Software | Bread</span><br></pre></td></tr></table></figure></li></ul><h3 id="Differences-between-Union-and-interfaces"><a href="#Differences-between-Union-and-interfaces" class="headerlink" title="Differences between Union and interfaces"></a>Differences between Union and interfaces</h3><ul><li>interface is to express common fields</li><li>union don’t need to have fields in common</li><li>To access the fields of a union type, we need to make a distinction by type using in the inline fragments.(section3.3.6)</li></ul><h2 id="Input-Types"><a href="#Input-Types" class="headerlink" title="Input Types"></a>Input Types</h2><p>Input types are used for passing input data in the form of arguments. Input types are used in mutations. When an instance of an input type is serialized, the data is formatted in JSON syntax.</p><ul><li>It looks like the definition of regular object types, but with keyword <strong>input</strong> instead of <strong>type</strong>.</li><li>!!!! Input types can’t have fields of an object type, only scalar types, list types, and other input types.</li><li>To prevent mixing, it is a useful convention, to amrk input types, e.g. by using the postfix Input.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input BookInput &#123;</span><br><span class="line">    title: String</span><br><span class="line">    authors: [AuthorInput]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input AuthorInput &#123;</span><br><span class="line">    name: String</span><br><span class="line">    books: [BookInput]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GraphQL-Type-System&quot;&gt;&lt;a href=&quot;#GraphQL-Type-System&quot; class=&quot;headerlink&quot; title=&quot;GraphQL Type System&quot;&gt;&lt;/a&gt;GraphQL Type System&lt;/h2&gt;&lt;p&gt;Gr
      
    
    </summary>
    
      <category term="GraphQL" scheme="http://fuyaoli.me/categories/GraphQL/"/>
    
    
      <category term="ardent academy" scheme="http://fuyaoli.me/tags/ardent-academy/"/>
    
      <category term="Computer Science" scheme="http://fuyaoli.me/tags/Computer-Science/"/>
    
      <category term="JavaScript" scheme="http://fuyaoli.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>inline comment in Github PR</title>
    <link href="http://fuyaoli.me/2019/04/07/inline-comment-in-Github-PR/"/>
    <id>http://fuyaoli.me/2019/04/07/inline-comment-in-Github-PR/</id>
    <published>2019-04-08T00:13:40.000Z</published>
    <updated>2019-04-15T02:54:38.038Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Github-Feature：-inline-comment-in-Github-PR"><a href="#Github-Feature：-inline-comment-in-Github-PR" class="headerlink" title="Github Feature： inline comment in Github PR"></a>Github Feature： inline comment in Github PR</h3><ul><li>I didn’t notice this before and I think this is a very good feature. It could give suggestions regarding specific lines.</li><li><p>The suggestioned lines can be commited directly. It is very convenient to use.<br><img src="https://res.cloudinary.com/dbuk0to55/image/upload/v1554689790/inlineSuggestion.png" alt="alter text"></p></li><li><p>Refer to this <a href="https://twitter.com/github/status/1053360435074949120" target="_blank" rel="noopener">link</a> for more detailed GIF.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Github-Feature：-inline-comment-in-Github-PR&quot;&gt;&lt;a href=&quot;#Github-Feature：-inline-comment-in-Github-PR&quot; class=&quot;headerlink&quot; title=&quot;Github
      
    
    </summary>
    
      <category term="Github" scheme="http://fuyaoli.me/categories/Github/"/>
    
    
      <category term="Computer Science" scheme="http://fuyaoli.me/tags/Computer-Science/"/>
    
      <category term="Github" scheme="http://fuyaoli.me/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL-1 GraphQL Introduction</title>
    <link href="http://fuyaoli.me/2019/04/03/graphql-1/"/>
    <id>http://fuyaoli.me/2019/04/03/graphql-1/</id>
    <published>2019-04-03T18:41:32.000Z</published>
    <updated>2019-04-19T22:46:09.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>This series of articles are summarized from “GraphQL API design”</p></blockquote><h2 id="1-1-Interaction-between-frontend-and-backend"><a href="#1-1-Interaction-between-frontend-and-backend" class="headerlink" title="1.1 Interaction between frontend and backend"></a>1.1 Interaction between frontend and backend</h2><p>These needs of frontends regarding the interaction with backends are quite universal. Thus, a couple of philosophies, such as RPC, SOAP, REST, and GraphQL, have been developed to structure the interaction between frontend and backend.</p><h2 id="What-is-GraphQL"><a href="#What-is-GraphQL" class="headerlink" title="What is GraphQL?"></a>What is GraphQL?</h2><p>GraphQL allows us to build APIs for retrieving data, writing data and getting notified when data changes.</p><p>GraphQL offers:</p><ul><li>a declarative, typed query language for APIs</li><li>a schema language for specifying data structures</li><li>a runtime for building APIs</li></ul><h2 id="Why-are-there-two-languages-in-GraphQL"><a href="#Why-are-there-two-languages-in-GraphQL" class="headerlink" title="Why are there two languages in GraphQL?"></a>Why are there two languages in GraphQL?</h2><h3 id="1-Query-language"><a href="#1-Query-language" class="headerlink" title="1. Query language"></a>1. Query language</h3><p>The purpose of the query language is to interact with the GraphQL endpoint.</p><h3 id="2-schema-definition-language"><a href="#2-schema-definition-language" class="headerlink" title="2. schema definition language"></a>2. schema definition language</h3><p>To define the structure of the business data exposed by the GraphQL API. API providers use the schema definition language to specify the interface.</p><h2 id="What-the-graph-in-GraphQL"><a href="#What-the-graph-in-GraphQL" class="headerlink" title="What the graph in GraphQL?"></a>What the graph in GraphQL?</h2><p>A graph is a very generic data structure, it should be possible to express the data of any application in the form of a graph. And this graph, formed by all application data, is what we call the graph in GraphQL.</p><p>All data is exposed via a single endpoint in GraphQL. Compared with REST endpoints, the single GraphQL endpoint expose a lot of data. This comprehensive set of data with its entities and relationships between the various entities forms the graph of GraphQL.</p><p>REST APIs exposes data not in a format of generic type. Both REST and GraphQL are capable of expressing application data in form of a graph, with GraphQL the graph is more explicit, since it is served on a single endpoint.</p><h2 id="A-GraphQL-application"><a href="#A-GraphQL-application" class="headerlink" title="A GraphQL application"></a>A GraphQL application</h2><ul><li>GraphQL API: part of the backend</li><li>GraphQL client: part of the frontend</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;This series of articles are summarized from “GraphQL API design”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-1-Interaction-between-frontend-
      
    
    </summary>
    
      <category term="GraphQL" scheme="http://fuyaoli.me/categories/GraphQL/"/>
    
    
      <category term="ardent academy" scheme="http://fuyaoli.me/tags/ardent-academy/"/>
    
      <category term="Computer Science" scheme="http://fuyaoli.me/tags/Computer-Science/"/>
    
      <category term="JavaScript" scheme="http://fuyaoli.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Deployment workflow</title>
    <link href="http://fuyaoli.me/2019/04/01/Secure-Deployment-of-Projects/"/>
    <id>http://fuyaoli.me/2019/04/01/Secure-Deployment-of-Projects/</id>
    <published>2019-04-01T21:13:10.000Z</published>
    <updated>2019-04-15T03:12:00.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intuition-of-writing-this-Blog"><a href="#Intuition-of-writing-this-Blog" class="headerlink" title="Intuition of writing this Blog"></a>Intuition of writing this Blog</h1><p>As an intern in ardent academy, I must know how to deploy projects in a secure and reliable manner. We work on Agile development environment. There are something I need to pay attention to when I want to submit a PR to the working repo.</p><h1 id="Starting-a-task"><a href="#Starting-a-task" class="headerlink" title="Starting a task"></a>Starting a task</h1><ul><li>Go to the “Active Sprints” section of your project and find an Issue.</li><li>Change the status from “To Do” to “IN PROGRESS” and start your development.</li></ul><h1 id="Completing-a-task"><a href="#Completing-a-task" class="headerlink" title="Completing a task"></a>Completing a task</h1><ul><li><p>Once tbe development is done and create a pull request (PR) and commit your code, follow the <a href="https://www.conventionalcommits.org/en/v1.0.0-beta.2/" target="_blank" rel="noopener">conventional commits</a> and <a href="https://jeffkreeftmeijer.com/git-flow/" target="_blank" rel="noopener">git flow</a>.</p></li><li><p>We rely on a Continuous Integration and Delivery system (CI/CD) called <strong>Drone</strong>. Drone runs unit tests then deploys our applications to their staging and production environments. Visit our Drone dashboard at drone.ardentlabs.io to see the progress of your build.</p></li></ul><h2 id="Unit-testing"><a href="#Unit-testing" class="headerlink" title="Unit testing"></a>Unit testing</h2><ul><li>Run Prettier to format your code: npm run prettier</li><li>Commit the changes to a new branch. Each branch should contain one functional change, accompanied with tests and/or migration scripts. The smaller the change, the faster it takes for others to review.<ul><li>Feature: feat/office-location</li><li>Refactor: refactor/rename-classroom</li><li>Fix: fix/lesson-ordering</li></ul></li></ul><h1 id="Hotfixes-Urgent-fixes-to-master"><a href="#Hotfixes-Urgent-fixes-to-master" class="headerlink" title="Hotfixes (Urgent fixes to master)"></a>Hotfixes (Urgent fixes to master)</h1><ul><li>Fork hotfix branch from master (hotfix/everything-is-on-fire)</li><li>Implement your hotfix - be sure to run Prettier and follow Conventional Commits</li><li>Push your branch to GitHub</li><li>Create two PRs, one merging into master and one merging into develop</li><li>Request reviews from reviewers then make any requested changes</li><li>The two PRs should be reviewed in tandem. Once they pass reviews, merge both PRs.</li></ul><h1 id="How-to-do-release"><a href="#How-to-do-release" class="headerlink" title="How to do release"></a>How to do release</h1><ul><li>git checkout master</li><li>git pull</li><li>git checkout develop</li><li>git pull</li><li>git merge master</li><li>npm run release</li><li>git push –follow-tags</li><li>git checkout master</li><li>git merge develop</li><li>git push</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Intuition-of-writing-this-Blog&quot;&gt;&lt;a href=&quot;#Intuition-of-writing-this-Blog&quot; class=&quot;headerlink&quot; title=&quot;Intuition of writing this Blog&quot;&gt;
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://fuyaoli.me/categories/Computer-Science/"/>
    
    
      <category term="deployment" scheme="http://fuyaoli.me/tags/deployment/"/>
    
      <category term="ardent academy" scheme="http://fuyaoli.me/tags/ardent-academy/"/>
    
      <category term="web developments" scheme="http://fuyaoli.me/tags/web-developments/"/>
    
  </entry>
  
  <entry>
    <title>How to build a Blog based on Hexo</title>
    <link href="http://fuyaoli.me/2019/03/25/build-blog-with-hexo/"/>
    <id>http://fuyaoli.me/2019/03/25/build-blog-with-hexo/</id>
    <published>2019-03-25T18:38:17.000Z</published>
    <updated>2019-04-15T02:54:09.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-My-blog"><a href="#1-My-blog" class="headerlink" title="1. My blog"></a>1. My blog</h1><p>Generally, I build this blog with hexo and github pages. Then, I bought a domain name and attached the github page to that domain name. This is the blog I am using right now.</p><p>You can refer to the source code at this link: <a href="https://github.com/FuyaoLi2017/FuyaoLi2017.github.io" target="_blank" rel="noopener">https://github.com/FuyaoLi2017/FuyaoLi2017.github.io</a>, you are welcomed to fork and leave me comments~</p><h1 id="2-Github-page-and-domain-name-settings"><a href="#2-Github-page-and-domain-name-settings" class="headerlink" title="2. Github page and domain name settings"></a>2. Github page and domain name settings</h1><ul><li>create a github account and create a repo with exactly the name [yourusername].github.io, in the Settings tab, configure your customized domain name. Remember to create the SSH key for your local computer to upload the code to Github.</li><li>I bought my domain name on Godaddy.com and configured the DNS settings following this link: <a href="https://medium.com/@coryminglee/hosting-your-github-page-in-godaddy-domain-in-2018-b872b39190f9" target="_blank" rel="noopener">https://medium.com/@coryminglee/hosting-your-github-page-in-godaddy-domain-in-2018-b872b39190f9</a>.</li><li>If you want to enable a more secure connection, you might want to buy a certificate to enable HTTPS. I think it is kind of expensive for me, so I just choose to leave it as HTTP connection.</li></ul><h1 id="3-Blog-configuration"><a href="#3-Blog-configuration" class="headerlink" title="3. Blog configuration"></a>3. Blog configuration</h1><ul><li>I used Hexo to build my blog and choose the next theme to be my current theme. It allows me to update the and deploy my blog automatically.</li><li>Refer to this link to generate a hexo project folder:<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></li><li>Most configurations are made in <code>_config.yml</code>(general configuration) and <code>themes/next/_config.yml</code>(customized configuration for your own theme)</li></ul><h2 id="3-1-config-yml-configuration"><a href="#3-1-config-yml-configuration" class="headerlink" title="3.1 _config.yml configuration"></a>3.1 <code>_config.yml</code> configuration</h2><ul><li>You can follow the existing hints in the <code>_config.yml</code> to do basic configurations.<h3 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h3>For the deployment, which is the most important thing, you need to configure it as follows. Remember to leave a space after <strong>type:</strong>, this is super important for all configuration, the content won’t be parsed if you don’t put a space here.<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/FuyaoLi2017/FuyaoLi2017.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Search-function"><a href="#Search-function" class="headerlink" title="Search function"></a>Search function</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><h3 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site map</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure><h3 id="Theme-configurations"><a href="#Theme-configurations" class="headerlink" title="Theme configurations"></a>Theme configurations</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>follow this link to configure you RSS: <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">https://github.com/hexojs/hexo-generator-feed</a>.<br>I just found that in chrome, it will just bring up the source code, which is super weird, so I disabled this function.</p><h2 id="3-2-themes-next-config-yml-configuration"><a href="#3-2-themes-next-config-yml-configuration" class="headerlink" title="3.2 themes/next/_config.yml configuration"></a>3.2 <code>themes/next/_config.yml</code> configuration</h2><h3 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h3><p>The images the relative path starts from the source folder in the themes/next, if you put a photo in the themes/next/source/images, you can configure like this.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="comment">#small: /images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="comment">#medium: /images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="comment">#apple_touch_icon: /images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="comment">#safari_pinned_tab: /images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  small:</span> <span class="string">/images/photo.jpeg</span></span><br><span class="line"><span class="attr">  medium:</span> <span class="string">/images/photo.jpeg</span></span><br><span class="line"><span class="attr">  apple_touch_icon:</span> <span class="string">/images/photo.jpeg</span></span><br><span class="line"><span class="attr">  safari_pinned_tab:</span> <span class="string">/images/photo.jpeg</span></span><br></pre></td></tr></table></figure></p><h3 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h3><ul><li>You can define the project folders you want to show. If you want to create more menu items. You can use <code>hexo new page [something]</code>, refer to this link to find more detailed instructions:<a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/docs/writing.html</a>.</li><li>For the menu icons, you need to find the corresponding representation in the link <a href="https://fontawesome.com/icons?d=gallery" target="_blank" rel="noopener">https://fontawesome.com/icons?d=gallery</a> and configure it after the parallel just like this.<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="string">about</span> <span class="attr">Fuyao:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  Projects:</span> <span class="string">/projects/</span> <span class="string">||</span> <span class="string">tasks</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line"><span class="attr">  sitemap:</span> <span class="string">/sitemap.xml</span> <span class="string">||</span> <span class="string">sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Schemes"><a href="#Schemes" class="headerlink" title="Schemes"></a>Schemes</h3><p>configure the scheme you like and uncomment it like the code script below. Examples of different schemes can be found here:<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a>. Check it and find one you like better.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></p><h3 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h3><p>Fonts can be configured in the fonts tags and it can be configured in five aspects. You can check out fonts in fonts.googleapis.com and put the name of the fonts here to update your blog’s fonts.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default).</span></span><br><span class="line"><span class="attr">  host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: xx`. Use `px` as unit.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used on &lt;body&gt; element.</span></span><br><span class="line"><span class="attr">  global:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Merriweather</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for Headlines (h1, h2, h3, h4, h5, h6).</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line"><span class="attr">  headings:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Merriweather</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts.</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Merriweather</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for Logo.</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line"><span class="attr">  logo:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Lemon</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">26</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line"><span class="attr">  codes:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">PT</span> <span class="string">Mono</span></span><br><span class="line"><span class="attr">    size:</span></span><br></pre></td></tr></table></figure></p><h3 id="Comment-function"><a href="#Comment-function" class="headerlink" title="Comment function"></a>Comment function</h3><p>There are multiple ways to realize the comment function. Disqus is a easy way to implement that, register a disqus account and configure it as follows should add comment function to your blog.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">[short</span> <span class="string">name</span> <span class="string">for</span> <span class="string">your</span> <span class="string">disqus</span> <span class="string">account]</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h3 id="Vistor-count-function"><a href="#Vistor-count-function" class="headerlink" title="Vistor count function"></a>Vistor count function</h3><p>There are multiple ways to enable this function. I used leancloud to realized that. You can register an account in leancloud and create a empty database called Counter. Then, just copy the app_id and app_key here to realize that.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">[your</span> <span class="string">app</span> <span class="string">id]</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">[your</span> <span class="string">app</span> <span class="string">key]</span></span><br></pre></td></tr></table></figure></p><h3 id="More-advanced-options"><a href="#More-advanced-options" class="headerlink" title="More advanced options"></a>More advanced options</h3><ul><li><p>background pictures can be configured in <code>themes/next/source/css/_custom/custom.styl</code>. My configuration works on PC side, the mobile side is not working so well, you can make more complicated cofiguration to make it adaptable.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">background-image:url(/images/golden-gate-bridge.jpg);</span><br><span class="line">background-repeat: no-repeat;</span><br><span class="line">background-size: cover;</span><br><span class="line">background-attachment:fixed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#footer a &#123;</span><br><span class="line">    color:#eee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>The width of the blog area is kind of too small. I configured it to be larger with relative parameter settings. After consulting so many blogs. I found the following configuration is the most simple and powerful choice. In <code>themes/next/source/css/_variables/custom.styl</code>, you need to configure it as follows using the calc function in CSS.</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$main-desktop                   = 75%</span><br><span class="line">$content-desktop                = calc(100% - 252px)</span><br></pre></td></tr></table></figure><h1 id="4-End"><a href="#4-End" class="headerlink" title="4. End"></a>4. End</h1><p>Thanks for reading my blog. Hope it can help you with buliding you own blog! You are welcome to leave comments if you have any problems.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-My-blog&quot;&gt;&lt;a href=&quot;#1-My-blog&quot; class=&quot;headerlink&quot; title=&quot;1. My blog&quot;&gt;&lt;/a&gt;1. My blog&lt;/h1&gt;&lt;p&gt;Generally, I build this blog with hexo a
      
    
    </summary>
    
      <category term="website" scheme="http://fuyaoli.me/categories/website/"/>
    
    
      <category term="blog" scheme="http://fuyaoli.me/tags/blog/"/>
    
      <category term="Computer Science" scheme="http://fuyaoli.me/tags/Computer-Science/"/>
    
  </entry>
  
</feed>
