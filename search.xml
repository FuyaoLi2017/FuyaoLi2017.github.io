<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Deployment workflow</title>
    <url>/2019/04/01/Secure-Deployment-of-Projects/</url>
    <content><![CDATA[<h1 id="Intuition-of-writing-this-Blog"><a href="#Intuition-of-writing-this-Blog" class="headerlink" title="Intuition of writing this Blog"></a>Intuition of writing this Blog</h1><p>As an intern in ardent academy, I must know how to deploy projects in a secure and reliable manner. We work on Agile development environment. There are something I need to pay attention to when I want to submit a PR to the working repo.</p>
<h1 id="Starting-a-task"><a href="#Starting-a-task" class="headerlink" title="Starting a task"></a>Starting a task</h1><ul>
<li>Go to the “Active Sprints” section of your project and find an Issue.</li>
<li>Change the status from “To Do” to “IN PROGRESS” and start your development.</li>
</ul>
<h1 id="Completing-a-task"><a href="#Completing-a-task" class="headerlink" title="Completing a task"></a>Completing a task</h1><ul>
<li><p>Once tbe development is done and create a pull request (PR) and commit your code, follow the <a href="https://www.conventionalcommits.org/en/v1.0.0-beta.2/" target="_blank" rel="noopener">conventional commits</a> and <a href="https://jeffkreeftmeijer.com/git-flow/" target="_blank" rel="noopener">git flow</a>.</p>
</li>
<li><p>We rely on a Continuous Integration and Delivery system (CI/CD) called <strong>Drone</strong>. Drone runs unit tests then deploys our applications to their staging and production environments. Visit our Drone dashboard at drone.ardentlabs.io to see the progress of your build.</p>
</li>
</ul>
<h2 id="Unit-testing"><a href="#Unit-testing" class="headerlink" title="Unit testing"></a>Unit testing</h2><ul>
<li>Run Prettier to format your code: npm run prettier</li>
<li>Commit the changes to a new branch. Each branch should contain one functional change, accompanied with tests and/or migration scripts. The smaller the change, the faster it takes for others to review.<ul>
<li>Feature: feat/office-location</li>
<li>Refactor: refactor/rename-classroom</li>
<li>Fix: fix/lesson-ordering</li>
</ul>
</li>
</ul>
<h1 id="Hotfixes-Urgent-fixes-to-master"><a href="#Hotfixes-Urgent-fixes-to-master" class="headerlink" title="Hotfixes (Urgent fixes to master)"></a>Hotfixes (Urgent fixes to master)</h1><ul>
<li>Fork hotfix branch from master (hotfix/everything-is-on-fire)</li>
<li>Implement your hotfix - be sure to run Prettier and follow Conventional Commits</li>
<li>Push your branch to GitHub</li>
<li>Create two PRs, one merging into master and one merging into develop</li>
<li>Request reviews from reviewers then make any requested changes</li>
<li>The two PRs should be reviewed in tandem. Once they pass reviews, merge both PRs.</li>
</ul>
<h1 id="How-to-do-release"><a href="#How-to-do-release" class="headerlink" title="How to do release"></a>How to do release</h1><ul>
<li>git checkout master</li>
<li>git pull</li>
<li>git checkout develop</li>
<li>git pull</li>
<li>git merge master</li>
<li>npm run release</li>
<li>git push –follow-tags</li>
<li>git checkout master</li>
<li>git merge develop</li>
<li>git push</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>deployment</tag>
        <tag>ardent academy</tag>
        <tag>web developments</tag>
      </tags>
  </entry>
  <entry>
    <title>backtracking</title>
    <url>/2019/05/11/backtracking/</url>
    <content><![CDATA[<h1 id="1-Subsets"><a href="#1-Subsets" class="headerlink" title="1. Subsets"></a>1. Subsets</h1><p>Given a set of distinct integers, nums, return all possible subsets (the power set).<br>Note: The solution set must not contain duplicate subsets.</p>
<h2 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h2><ul>
<li><p>use layer by layer DFS</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        dfs(result, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; current, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == nums.length) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(current));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current.add(nums[index]);</span><br><span class="line">        dfs(result, current, nums, index + <span class="number">1</span>);</span><br><span class="line">        current.remove(current.size() - <span class="number">1</span>);</span><br><span class="line">        dfs(result, current, nums, index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>use for loop to traverse in DFS</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list , List&lt;Integer&gt; tempList, <span class="keyword">int</span> [] nums, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">        tempList.add(nums[i]);</span><br><span class="line">        backtrack(list, tempList, nums, i + <span class="number">1</span>);</span><br><span class="line">        tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="2-Subsets2"><a href="#2-Subsets2" class="headerlink" title="2. Subsets2"></a>2. Subsets2</h1><h1 id="3-Combinations"><a href="#3-Combinations" class="headerlink" title="3. Combinations"></a>3. Combinations</h1><blockquote>
<p><a href="https://leetcode.com/problems/combinations/" target="_blank" rel="noopener">https://leetcode.com/problems/combinations/</a></p>
</blockquote>
<p>Given two integers n and k, return all possible combinations of k numbers out of 1 … n.<br>Input: n = 4, k = 2<br>Output:<br>[[2,4],[3,4],[2,3],[1,2],[1,3],[1,4]]</p>
<ul>
<li><p>a better solution, using the input variable as counter, high vote answer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">       List&lt;List&lt;Integer&gt;&gt; combs = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">       combine(combs, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), <span class="number">1</span>, n, k);</span><br><span class="line">       <span class="keyword">return</span> combs;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">combine</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; combs, List&lt;Integer&gt; comb, <span class="keyword">int</span> start, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(k==<span class="number">0</span>) &#123;</span><br><span class="line">           combs.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(comb));</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=n;i++) &#123;</span><br><span class="line">           comb.add(i);</span><br><span class="line">           combine(combs, comb, i+<span class="number">1</span>, n, k-<span class="number">1</span>);</span><br><span class="line">           comb.remove(comb.size()-<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>My solution, using for loop to DFS</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; k || k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        dfs(result, <span class="keyword">new</span> ArrayList&lt;&gt;(), <span class="number">1</span>, n, k);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; currentList, <span class="keyword">int</span> index, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (currentList.size() == k) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(currentList));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == n+<span class="number">1</span>) &#123; <span class="comment">// have reach the end of the array and has not accumlated to k elements</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt;= n; i++) &#123;</span><br><span class="line">            currentList.add(i);</span><br><span class="line">            dfs(result, currentList, i + <span class="number">1</span>, n, k);</span><br><span class="line">            currentList.remove(currentList.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Computer Science</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>How to build a Blog based on Hexo</title>
    <url>/2019/03/25/build-blog-with-hexo/</url>
    <content><![CDATA[<h1 id="1-My-blog"><a href="#1-My-blog" class="headerlink" title="1. My blog"></a>1. My blog</h1><p>Generally, I build this blog with hexo and github pages. Then, I bought a domain name and attached the github page to that domain name. This is the blog I am using right now.</p>
<p>You can refer to the source code at this link: <a href="https://github.com/FuyaoLi2017/FuyaoLi2017.github.io" target="_blank" rel="noopener">https://github.com/FuyaoLi2017/FuyaoLi2017.github.io</a>, you are welcomed to fork and leave me comments~</p>
<h1 id="2-Github-page-and-domain-name-settings"><a href="#2-Github-page-and-domain-name-settings" class="headerlink" title="2. Github page and domain name settings"></a>2. Github page and domain name settings</h1><ul>
<li>create a github account and create a repo with exactly the name [yourusername].github.io, in the Settings tab, configure your customized domain name. Remember to create the SSH key for your local computer to upload the code to Github.</li>
<li>I bought my domain name on Godaddy.com and configured the DNS settings following this link: <a href="https://medium.com/@coryminglee/hosting-your-github-page-in-godaddy-domain-in-2018-b872b39190f9" target="_blank" rel="noopener">https://medium.com/@coryminglee/hosting-your-github-page-in-godaddy-domain-in-2018-b872b39190f9</a>.</li>
<li>If you want to enable a more secure connection, you might want to buy a certificate to enable HTTPS. I think it is kind of expensive for me, so I just choose to leave it as HTTP connection.</li>
</ul>
<h1 id="3-Blog-configuration"><a href="#3-Blog-configuration" class="headerlink" title="3. Blog configuration"></a>3. Blog configuration</h1><ul>
<li>I used Hexo to build my blog and choose the next theme to be my current theme. It allows me to update the and deploy my blog automatically.</li>
<li>Refer to this link to generate a hexo project folder:<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></li>
<li>Most configurations are made in <code>_config.yml</code>(general configuration) and <code>themes/next/_config.yml</code>(customized configuration for your own theme)</li>
</ul>
<h2 id="3-1-config-yml-configuration"><a href="#3-1-config-yml-configuration" class="headerlink" title="3.1 _config.yml configuration"></a>3.1 <code>_config.yml</code> configuration</h2><ul>
<li>You can follow the existing hints in the <code>_config.yml</code> to do basic configurations.<h3 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h3>For the deployment, which is the most important thing, you need to configure it as follows. Remember to leave a space after <strong>type:</strong>, this is super important for all configuration, the content won’t be parsed if you don’t put a space here.<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/FuyaoLi2017/FuyaoLi2017.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Search-function"><a href="#Search-function" class="headerlink" title="Search function"></a>Search function</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<h3 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site map</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure>
<h3 id="Theme-configurations"><a href="#Theme-configurations" class="headerlink" title="Theme configurations"></a>Theme configurations</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>follow this link to configure you RSS: <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">https://github.com/hexojs/hexo-generator-feed</a>.<br>I just found that in chrome, it will just bring up the source code, which is super weird, so I disabled this function.</p>
<h2 id="3-2-themes-next-config-yml-configuration"><a href="#3-2-themes-next-config-yml-configuration" class="headerlink" title="3.2 themes/next/_config.yml configuration"></a>3.2 <code>themes/next/_config.yml</code> configuration</h2><h3 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h3><p>The images the relative path starts from the source folder in the themes/next, if you put a photo in the themes/next/source/images, you can configure like this.<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="comment">#small: /images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="comment">#medium: /images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="comment">#apple_touch_icon: /images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="comment">#safari_pinned_tab: /images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  small:</span> <span class="string">/images/photo.jpeg</span></span><br><span class="line"><span class="attr">  medium:</span> <span class="string">/images/photo.jpeg</span></span><br><span class="line"><span class="attr">  apple_touch_icon:</span> <span class="string">/images/photo.jpeg</span></span><br><span class="line"><span class="attr">  safari_pinned_tab:</span> <span class="string">/images/photo.jpeg</span></span><br></pre></td></tr></table></figure></p>
<h3 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h3><ul>
<li>You can define the project folders you want to show. If you want to create more menu items. You can use <code>hexo new page [something]</code>, refer to this link to find more detailed instructions:<a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/docs/writing.html</a>.</li>
<li>For the menu icons, you need to find the corresponding representation in the link <a href="https://fontawesome.com/icons?d=gallery" target="_blank" rel="noopener">https://fontawesome.com/icons?d=gallery</a> and configure it after the parallel just like this.<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="string">about</span> <span class="attr">Fuyao:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  Projects:</span> <span class="string">/projects/</span> <span class="string">||</span> <span class="string">tasks</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line"><span class="attr">  sitemap:</span> <span class="string">/sitemap.xml</span> <span class="string">||</span> <span class="string">sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Schemes"><a href="#Schemes" class="headerlink" title="Schemes"></a>Schemes</h3><p>configure the scheme you like and uncomment it like the code script below. Examples of different schemes can be found here:<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a>. Check it and find one you like better.<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h3><p>Fonts can be configured in the fonts tags and it can be configured in five aspects. You can check out fonts in fonts.googleapis.com and put the name of the fonts here to update your blog’s fonts.<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default).</span></span><br><span class="line"><span class="attr">  host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: xx`. Use `px` as unit.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used on &lt;body&gt; element.</span></span><br><span class="line"><span class="attr">  global:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Merriweather</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for Headlines (h1, h2, h3, h4, h5, h6).</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line"><span class="attr">  headings:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Merriweather</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts.</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Merriweather</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for Logo.</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line"><span class="attr">  logo:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Lemon</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">26</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line"><span class="attr">  codes:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">PT</span> <span class="string">Mono</span></span><br><span class="line"><span class="attr">    size:</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Comment-function"><a href="#Comment-function" class="headerlink" title="Comment function"></a>Comment function</h3><p>There are multiple ways to realize the comment function. Disqus is a easy way to implement that, register a disqus account and configure it as follows should add comment function to your blog.<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">[short</span> <span class="string">name</span> <span class="string">for</span> <span class="string">your</span> <span class="string">disqus</span> <span class="string">account]</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Vistor-count-function"><a href="#Vistor-count-function" class="headerlink" title="Vistor count function"></a>Vistor count function</h3><p>There are multiple ways to enable this function. I used leancloud to realized that. You can register an account in leancloud and create a empty database called Counter. Then, just copy the app_id and app_key here to realize that.<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">[your</span> <span class="string">app</span> <span class="string">id]</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">[your</span> <span class="string">app</span> <span class="string">key]</span></span><br></pre></td></tr></table></figure></p>
<h3 id="More-advanced-options"><a href="#More-advanced-options" class="headerlink" title="More advanced options"></a>More advanced options</h3><ul>
<li><p>background pictures can be configured in <code>themes/next/source/css/_custom/custom.styl</code>. My configuration works on PC side, the mobile side is not working so well, you can make more complicated cofiguration to make it adaptable.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">background-image:url(/images/golden-gate-bridge.jpg);</span><br><span class="line">background-repeat: no-repeat;</span><br><span class="line">background-size: cover;</span><br><span class="line">background-attachment:fixed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#footer a &#123;</span><br><span class="line">    color:#eee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>The width of the blog area is kind of too small. I configured it to be larger with relative parameter settings. After consulting so many blogs. I found the following configuration is the most simple and powerful choice. In <code>themes/next/source/css/_variables/custom.styl</code>, you need to configure it as follows using the calc function in CSS.</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$main-desktop                   = 75%</span><br><span class="line">$content-desktop                = calc(100% - 252px)</span><br></pre></td></tr></table></figure>
<h1 id="4-End"><a href="#4-End" class="headerlink" title="4. End"></a>4. End</h1><p>Thanks for reading my blog. Hope it can help you with buliding you own blog! You are welcome to leave comments if you have any problems.</p>
]]></content>
      <categories>
        <category>website</category>
      </categories>
      <tags>
        <tag>Computer Science</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphQL-1 GraphQL Introduction</title>
    <url>/2019/04/03/graphql-1/</url>
    <content><![CDATA[<blockquote>
<p>This series of articles are summarized from “GraphQL API design”</p>
</blockquote>
<h2 id="1-1-Interaction-between-frontend-and-backend"><a href="#1-1-Interaction-between-frontend-and-backend" class="headerlink" title="1.1 Interaction between frontend and backend"></a>1.1 Interaction between frontend and backend</h2><p>These needs of frontends regarding the interaction with backends are quite universal. Thus, a couple of philosophies, such as RPC, SOAP, REST, and GraphQL, have been developed to structure the interaction between frontend and backend.</p>
<h2 id="What-is-GraphQL"><a href="#What-is-GraphQL" class="headerlink" title="What is GraphQL?"></a>What is GraphQL?</h2><p>GraphQL allows us to build APIs for retrieving data, writing data and getting notified when data changes.</p>
<p>GraphQL offers:</p>
<ul>
<li>a declarative, typed query language for APIs</li>
<li>a schema language for specifying data structures</li>
<li>a runtime for building APIs</li>
</ul>
<h2 id="Why-are-there-two-languages-in-GraphQL"><a href="#Why-are-there-two-languages-in-GraphQL" class="headerlink" title="Why are there two languages in GraphQL?"></a>Why are there two languages in GraphQL?</h2><h3 id="1-Query-language"><a href="#1-Query-language" class="headerlink" title="1. Query language"></a>1. Query language</h3><p>The purpose of the query language is to interact with the GraphQL endpoint.</p>
<h3 id="2-schema-definition-language"><a href="#2-schema-definition-language" class="headerlink" title="2. schema definition language"></a>2. schema definition language</h3><p>To define the structure of the business data exposed by the GraphQL API. API providers use the schema definition language to specify the interface.</p>
<h2 id="What-the-graph-in-GraphQL"><a href="#What-the-graph-in-GraphQL" class="headerlink" title="What the graph in GraphQL?"></a>What the graph in GraphQL?</h2><p>A graph is a very generic data structure, it should be possible to express the data of any application in the form of a graph. And this graph, formed by all application data, is what we call the graph in GraphQL.</p>
<p>All data is exposed via a single endpoint in GraphQL. Compared with REST endpoints, the single GraphQL endpoint expose a lot of data. This comprehensive set of data with its entities and relationships between the various entities forms the graph of GraphQL.</p>
<p>REST APIs exposes data not in a format of generic type. Both REST and GraphQL are capable of expressing application data in form of a graph, with GraphQL the graph is more explicit, since it is served on a single endpoint.</p>
<h2 id="A-GraphQL-application"><a href="#A-GraphQL-application" class="headerlink" title="A GraphQL application"></a>A GraphQL application</h2><ul>
<li>GraphQL API: part of the backend</li>
<li>GraphQL client: part of the frontend</li>
</ul>
]]></content>
      <categories>
        <category>GraphQL</category>
      </categories>
      <tags>
        <tag>ardent academy</tag>
        <tag>Computer Science</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphQL-2 GraphQL Schema Language</title>
    <url>/2019/04/14/graphql-2/</url>
    <content><![CDATA[<h2 id="GraphQL-Type-System"><a href="#GraphQL-Type-System" class="headerlink" title="GraphQL Type System"></a>GraphQL Type System</h2><p>GraphQL have strong type systems. A field can be amrked with an exclamation mark ! to indicate that the field is obligatory (will not be null). Otherwise, it will be nillable (optional fields).</p>
<ul>
<li>During execution/resolutoin of a query, the type system helps to determine what to do next.</li>
<li>When crafting queries, the introspection mechanism provided through the type system, allows us to do syntax directly editing and guide us with respect to what is possible and available.</li>
</ul>
<h2 id="Root-types"><a href="#Root-types" class="headerlink" title="Root types"></a>Root types</h2><p>Root types can be used as the starting point for a certain operation.</p>
<ul>
<li>Query</li>
<li>Mutation</li>
<li>Subscription<h3 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h3>Every graphQL implementation must ahve define a query and a mutation and subscription can be optional.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type Query &#123;</span><br><span class="line">    books: [Book]</span><br><span class="line">    book(title:String!): Book</span><br><span class="line">    book_by_id(id:ID!):Book</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Mutation &#123;</span><br><span class="line">    addBook(title: String!): Book</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Subscription &#123;</span><br><span class="line">    bookAdded: Book</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Scalar-Types"><a href="#Scalar-Types" class="headerlink" title="Scalar Types"></a>Scalar Types</h2><h3 id="built-in-GraphQL-scalar-types"><a href="#built-in-GraphQL-scalar-types" class="headerlink" title="built-in GraphQL scalar types"></a>built-in GraphQL scalar types</h3><ul>
<li>int</li>
<li>float</li>
<li>boolean</li>
<li>String</li>
<li>ID (used uniquely identify an object)</li>
</ul>
<h3 id="Custom-scalar-types"><a href="#Custom-scalar-types" class="headerlink" title="Custom scalar types"></a>Custom scalar types</h3><ul>
<li>Isbn (example)</li>
<li>[Author] (square brackets represent a list of things)</li>
</ul>
<h2 id="Array-representation"><a href="#Array-representation" class="headerlink" title="Array representation"></a>Array representation</h2><ul>
<li>Used to express a list of objects</li>
<li>[int]</li>
<li>[Book]</li>
</ul>
<h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><p>An enum has a limited set of values it can possibly to take on.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum trafficLight &#123;</span><br><span class="line">    RED</span><br><span class="line">    GREEN</span><br><span class="line">    YELLOW</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><ul>
<li><p>An interface is similar to a type definition, it defines a list of fields, but it can’t be instantiated.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Document &#123;</span><br><span class="line">    title: String</span><br><span class="line">    text: String</span><br><span class="line">    authors: [Author]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>A regular type that implements the interface can extend the interface.</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type Book implements Document &#123;</span><br><span class="line">    id: ID!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>The implementing type automatically contains the fields defined in the interface, they don’t need to be mentioned explicitly.</li>
<li>To access the additional fields of a type implementing an interface in a query, we always need to make a distinction by type using inline fragments.(refer to section3.3.6)</li>
</ul>
<h2 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h2><ul>
<li>A <em>Union</em> is a common type for serveral defining types. If an object is of a union type, it could be any of it s defining types.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union Product = Book | Software | Bread</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Differences-between-Union-and-interfaces"><a href="#Differences-between-Union-and-interfaces" class="headerlink" title="Differences between Union and interfaces"></a>Differences between Union and interfaces</h3><ul>
<li>interface is to express common fields</li>
<li>union don’t need to have fields in common</li>
<li>To access the fields of a union type, we need to make a distinction by type using in the inline fragments.(section3.3.6)</li>
</ul>
<h2 id="Input-Types"><a href="#Input-Types" class="headerlink" title="Input Types"></a>Input Types</h2><p>Input types are used for passing input data in the form of arguments. Input types are used in mutations. When an instance of an input type is serialized, the data is formatted in JSON syntax.</p>
<ul>
<li>It looks like the definition of regular object types, but with keyword <strong>input</strong> instead of <strong>type</strong>.</li>
<li>!!!! Input types can’t have fields of an object type, only scalar types, list types, and other input types.</li>
<li>To prevent mixing, it is a useful convention, to amrk input types, e.g. by using the postfix Input.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input BookInput &#123;</span><br><span class="line">    title: String</span><br><span class="line">    authors: [AuthorInput]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input AuthorInput &#123;</span><br><span class="line">    name: String</span><br><span class="line">    books: [BookInput]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>GraphQL</category>
      </categories>
      <tags>
        <tag>ardent academy</tag>
        <tag>Computer Science</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphQL-4 Building A GraphQL API</title>
    <url>/2019/05/01/graphql-4/</url>
    <content><![CDATA[<p>In this chapter, we discuss the features of a GraphQL API and mechanics behind it.</p>
<h2 id="4-1-GraphQL-API-mechanics"><a href="#4-1-GraphQL-API-mechanics" class="headerlink" title="4.1 GraphQL API mechanics"></a>4.1 GraphQL API mechanics</h2><p>All GraphQL APIs offer a number features that we need to understand in order build GraphQL APIs. The heart of this configuration is the GraphQL schema with its type definition.</p>
<ol>
<li>GraphQL Validation: Any request that is received by a GraphQL API, is first syntactically validated against the GraphQL SCHEMA.</li>
<li>GraphQL Execution: After the request has been validated, it needs to be interpreted and execute by the server to create a response.</li>
</ol>
<ul>
<li>Execution of queries: The graphQL SERVER returns a result that structurally mirrors the shape of the requested query. Before sending to the client, the server serializes the result, typically in JSON format.<ul>
<li>Creating a response to a query is actually a traversal of the graph.</li>
<li>Resolver functions: the resolver function is called recursively. For each of the subgraphs produced as output. A subgraph is an instance of a certain type. When such a subgraph is processed, the resolver function of its corresponding type is called. If the resolver function for a certain subgraph produces a scalar value like a string or number, the recursion terminates in that branch. The resolver function receive three arguments.<ul>
<li>obj: the parent object of the fields being resolved(graphQL query/mutation/subscription).(often <code>null</code> or left out).</li>
<li>args: the arguements provided to the fields in the graphQL query/mutation/subscription.</li>
<li>context: holds important contextual information, such as authenticated user and access to a database.</li>
</ul>
</li>
<li>Execution of subscription: There is no confirmation response. A response is only generated when the event actually occurs. The best practice to realize this bidirectional communication via teh webSocket protocol.</li>
</ul>
</li>
</ul>
<h2 id="4-2-GraphQL-server-architecture"><a href="#4-2-GraphQL-server-architecture" class="headerlink" title="4.2 GraphQL server architecture"></a>4.2 GraphQL server architecture</h2><h3 id="4-2-1-Green-Field-case-without-involving-any-existing-legacy-systems"><a href="#4-2-1-Green-Field-case-without-involving-any-existing-legacy-systems" class="headerlink" title="4.2.1 Green Field case: without involving any existing legacy systems"></a>4.2.1 Green Field case: without involving any existing legacy systems</h3><p>There can be multiple API endpoints lying above business logic.<br>RPC APIs, REST APIs, GraphQL APIs =&gt; Business logic =&gt; DB</p>
<h3 id="4-2-2-Legacy-case"><a href="#4-2-2-Legacy-case" class="headerlink" title="4.2.2 Legacy case"></a>4.2.2 Legacy case</h3><p>Cases we need to deal with existing legacy services and databases.</p>
<h2 id="4-3-GraphQL-API-design-methodology"><a href="#4-3-GraphQL-API-design-methodology" class="headerlink" title="4.3 GraphQL API design methodology"></a>4.3 GraphQL API design methodology</h2><h3 id="4-3-1-API-Design-Approach"><a href="#4-3-1-API-Design-Approach" class="headerlink" title="4.3.1 API Design Approach"></a>4.3.1 API Design Approach</h3><h4 id="4-3-1-1-Consumer-Oriented-API"><a href="#4-3-1-1-Consumer-Oriented-API" class="headerlink" title="4.3.1.1 Consumer-Oriented API"></a>4.3.1.1 Consumer-Oriented API</h4><p>The consumers of an API are the various developers building clients with the API. We need to know our prototypical API consumers, their needs, and the architecture of the solutions they are building.</p>
<h4 id="4-3-1-2-Reusability"><a href="#4-3-1-2-Reusability" class="headerlink" title="4.3.1.2 Reusability"></a>4.3.1.2 Reusability</h4><p>Consumer-oriented design can sometimes lead into trap of basically designing an API for one customer only. Instead, APIs need to be reusable products that can be reused by various consumers and in various use cases.</p>
<h4 id="4-3-1-3-API-Product-Design"><a href="#4-3-1-3-API-Product-Design" class="headerlink" title="4.3.1.3 API Product Design"></a>4.3.1.3 API Product Design</h4><p>The basic process for GraphQL API design in no different than the basic process for API design of REST APIs. If we design APIs as reusable products and design them from the perspective of the prototypical API consumers, then we are on the way to build consumer-oriented APIs - APIs that our consumers will love.</p>
<h3 id="4-3-2-GraphQL-API-Design-Phases"><a href="#4-3-2-GraphQL-API-Design-Phases" class="headerlink" title="4.3.2 GraphQL API Design Phases"></a>4.3.2 GraphQL API Design Phases</h3><ul>
<li>Each phase of this approach consists of a creative part and a verification part. In each phase of the design and development journey, feedback from the consumers is elicited. It is important to collect the feedback as early as possible.</li>
<li>This design approach is meant to be used iteratively. <strong>Keep in mind</strong>, that in an iterative and agile approach, not all information and requirements about the constructed artifact need to be available in the beginning, but new and more detailed information and insights are gathered and integrated during each iteration. <strong>This means we need to start from the needs of the API consumer towards the existing legacy systems, And not the other way!</strong></li>
<li>Our proposed API design approach is organized in six phases.</li>
</ul>
<h4 id="4-3-2-1-Phase-1-Domain-Analysis"><a href="#4-3-2-1-Phase-1-Domain-Analysis" class="headerlink" title="4.3.2.1 Phase 1: Domain Analysis"></a>4.3.2.1 Phase 1: Domain Analysis</h4><p>Domain analysis should get us thinking from an API consumer perspective: Who are the consumers of the API? How does an API consumer prefer to interact with the data delivered by the API?</p>
<h4 id="4-3-2-2-Phase-2-Architectural-Design"><a href="#4-3-2-2-Phase-2-Architectural-Design" class="headerlink" title="4.3.2.2 Phase 2: Architectural Design"></a>4.3.2.2 Phase 2: Architectural Design</h4><p>In the architecture design phase, we choose a server architecture(<code>4.2</code>), an API philosophy, and an architectural style for realizing the API. In the scope this graphQL design book, we will assume we choose a three-level server architecture with GraphQL as our API philosophy in the front-facing layer.</p>
<h4 id="4-3-2-3-Phase-3-Prototyping"><a href="#4-3-2-3-Phase-3-Prototyping" class="headerlink" title="4.3.2.3 Phase 3: Prototyping"></a>4.3.2.3 Phase 3: Prototyping</h4><p>For prototyping a GraphQL API we need to define a schema(see chapter 2), which contains all the relevant types in the type graph. We use automatically created mock data, to simulate the response of the API and some first feedback and the API design. In this phase we can iterate multiple times by extending the schema and collecting feedback based on the mocked API.</p>
<h4 id="4-3-2-4-Phase-4-Implementing-for-Production"><a href="#4-3-2-4-Phase-4-Implementing-for-Production" class="headerlink" title="4.3.2.4 Phase 4: Implementing for Production"></a>4.3.2.4 Phase 4: Implementing for Production</h4><p>When implementing for production, we gradually move away from the use of mocked data, towards real data and real backend systems. At this point, the accidental complexity of the organically grown legacy systems may hit us and the API developers. In this phase, non-functional properties come into focus, such as stability, performance, and security.</p>
<h4 id="4-3-2-5-Phase-5-Publishing"><a href="#4-3-2-5-Phase-5-Publishing" class="headerlink" title="4.3.2.5 Phase 5: Publishing"></a>4.3.2.5 Phase 5: Publishing</h4><p>As soon as the GraphQL API is published, it needs to stay backward compatible with the original published version. Knowing about this hard cut imposed with initial publication of the GraphQL API, we need to ask if we have tested enough and have received enough and have received enough consumer feedback to be confident to take the big leap of publishing the API.</p>
<h4 id="4-3-2-6-Maintenance"><a href="#4-3-2-6-Maintenance" class="headerlink" title="4.3.2.6 Maintenance"></a>4.3.2.6 Maintenance</h4><p>During the maintenance, bugs and issues may be resolved, but also new functionality maybe introduced, as long as it is backward compatible: functionality and fields may be added without breaking clients, removing functionality or fields is not permitted.<br>Further down the line, we want to learn whether and why consumers use the API. We need to observe the metrics of our API to learn how consumers use the API. This cannot be based on analytics alone, but we need to communicate with our API consumers one-on-one and build and active community.</p>
]]></content>
      <categories>
        <category>GraphQL</category>
      </categories>
      <tags>
        <tag>ardent academy</tag>
        <tag>Computer Science</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>How to write standard GraphQL mutations</title>
    <url>/2019/05/17/how-to-write-graphQL-mutation/</url>
    <content><![CDATA[<h1 id="Basic-steps-of-building-a-mutation-in-graphQL"><a href="#Basic-steps-of-building-a-mutation-in-graphQL" class="headerlink" title="Basic steps of building a mutation in graphQL"></a>Basic steps of building a mutation in graphQL</h1><ol>
<li>define the return value strcture.(useful error message report and status feedback).</li>
<li>Define the mutation resolve function</li>
<li>Define the input parameters and output parameters of the mutation.</li>
<li>export the queries and mutations in this file and register it in <code>index.js</code></li>
</ol>
<h1 id="An-example-of-writing-a-mutation"><a href="#An-example-of-writing-a-mutation" class="headerlink" title="An example of writing a mutation"></a>An example of writing a mutation</h1><ul>
<li>More detailed source code can be referred right here(Private Repo). The code here is modified to avoid showing the business logic.<br><a href="https://github.com/FuyaoLi2017/JavaScript-Learning/blob/master/building-mutation-in-graphql.md" target="_blank" rel="noopener">https://github.com/FuyaoLi2017/JavaScript-Learning/blob/master/building-mutation-in-graphql.md</a></li>
</ul>
<h2 id="1-Step1-Define-the-return-value"><a href="#1-Step1-Define-the-return-value" class="headerlink" title="1. Step1: Define the return value"></a>1. Step1: Define the return value</h2><ul>
<li>I have changed the code to blur the original business logic. Main idea is to show the syntax. This is suppose to support a service to update all student grade according to centain rules.</li>
<li><ol>
<li>comma(<code>,</code>) is used to separate different properties within an object, normal JS sentences are separated by line feed, or semi colon<code>;</code>.</li>
</ol>
</li>
<li><ol start="2">
<li>You need to import corresponding graphQL type if that thing exists in your code.</li>
</ol>
</li>
<li><ol start="3">
<li>When we try to create the return data structure, we need to give feedback information as much as possible to help the frontend to locate the problem. Giving fields like <code>success</code>, <code>warning</code>,<code>message</code>, <code>useful wrong output lists</code> are helpful.</li>
</ol>
</li>
<li><ol start="4">
<li>Pay attention to the indentation of the <code>oneLine</code> thing. Just one TAB behind curly braces!</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; oneLine &#125; <span class="keyword">from</span> <span class="string">'common-tags'</span></span><br><span class="line"><span class="keyword">import</span> &#123; r &#125; <span class="keyword">from</span> <span class="string">'../../services/thinky'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  GraphQLObjectType,</span><br><span class="line">  GraphQLNonNull,</span><br><span class="line">  GraphQLBoolean,</span><br><span class="line">  GraphQLString,</span><br><span class="line">  GraphQLList,</span><br><span class="line">  GraphQLID,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'../scalars'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SubField = <span class="keyword">new</span> GraphQLObjectType(&#123;</span><br><span class="line">  name: <span class="string">'subField'</span>,</span><br><span class="line">  fields: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    studentID: &#123;</span><br><span class="line">      type: <span class="keyword">new</span> GraphQLNonNull(GraphQLID),</span><br><span class="line">      description: oneLine<span class="string">`</span></span><br><span class="line"><span class="string">        XXX</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    failedReason: &#123;</span><br><span class="line">      type: <span class="keyword">new</span> GraphQLNonNull(GraphQLString),</span><br><span class="line">      description: <span class="string">'XXX'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Result = <span class="keyword">new</span> GraphQLObjectType(&#123;</span><br><span class="line">  name: <span class="string">'Result'</span>,</span><br><span class="line">  fields: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    success: &#123;</span><br><span class="line">      type: <span class="keyword">new</span> GraphQLNonNull(GraphQLBoolean),</span><br><span class="line">    &#125;,</span><br><span class="line">    warning: &#123;</span><br><span class="line">      type: <span class="keyword">new</span> GraphQLNonNull(GraphQLBoolean),</span><br><span class="line">    &#125;,</span><br><span class="line">    message: &#123;</span><br><span class="line">      type: <span class="keyword">new</span> GraphQLNonNull(GraphQLString),</span><br><span class="line">      description: oneLine<span class="string">`</span></span><br><span class="line"><span class="string">        XXX</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    failedStudentsList: &#123;</span><br><span class="line">      type: <span class="keyword">new</span> GraphQLList(SubField),</span><br><span class="line">      description: oneLine<span class="string">`</span></span><br><span class="line"><span class="string">        XXX</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Step2-Use-async-function-to-update-the-information-in-the-database"><a href="#Step2-Use-async-function-to-update-the-information-in-the-database" class="headerlink" title="Step2: Use async function to update the information in the database"></a>Step2: Use async function to update the information in the database</h2><ul>
<li><ol>
<li>If we fetch something, even if it don’t have any return sentence, it won’t be null. The length will be 0, We should check <code>student.length == 0</code> instead of <code>!student</code>.</li>
</ol>
</li>
<li><ol start="2">
<li>Different between <code>for ___ of ___</code> and <code>for ___ in ___</code></li>
</ol>
<ul>
<li><code>for ... in ...</code> iterate over the keys of the objects. For array, it should be the index, 0,1,2,3…</li>
<li><code>for ... of ...</code> iterate the values of the objects directly.</li>
<li>so the following codes are the same<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (a <span class="keyword">in</span> stuff) &#123;</span><br><span class="line">  value = stuff[a]</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (value <span class="keyword">of</span> stuff) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ol start="3">
<li><code>[]</code> is used destructure an array, this let you to separate variables.<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"> <span class="comment">// then, the value of a, b, c will be</span></span><br><span class="line"> a = <span class="number">1</span></span><br><span class="line"> b = <span class="number">2</span></span><br><span class="line"> c = <span class="number">3</span></span><br><span class="line"> <span class="comment">// if you don't want all parameters</span></span><br><span class="line"> <span class="keyword">const</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"> a = <span class="number">1</span></span><br><span class="line"> b = <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Also, you can use <code>...</code> to hold the rest of variables in an array. <a href="https://dev.to/sagar/three-dots---in-javascript-26ci" target="_blank" rel="noopener">https://dev.to/sagar/three-dots---in-javascript-26ci</a></p>
<ul>
<li><ol start="4">
<li>Several ways to append elements at the end of the array<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line"><span class="comment">// (1)using push</span></span><br><span class="line">arr.push(<span class="string">"d"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) using concat</span></span><br><span class="line">arr.concat([<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// (3) using the length</span></span><br><span class="line">arr.[arr.length] = <span class="string">"d"</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><ol start="5">
<li>In the naming convention the GraphQL type, the first letter should be capitalized.</li>
</ol>
</li>
<li><ol start="6">
<li>For <code>await</code> function, we don’t need to handle the exceptions, it will handle itself in our base classes.</li>
</ol>
</li>
<li><ol start="7">
<li>Some fields of a certain graphQL type is not contained in its <code>DAO</code>, it is connected by its ID. We should use other <code>DAO</code> to fetch the things we want. Just check the rethinkdb database when the graphQL schema is not so clear. Database will have all fields we are looking for.</li>
</ol>
</li>
<li><ol start="8">
<li>Backtick usage<br>When we need to <code>console.log()</code> something, <code>quote mark</code> will work, but we can add any other extra variables.<br>with backtick, we can add extra variables. Also, <code>oneLine</code> node module can used right here to format the back tick surrounded strings.<br><a href="https://stackoverflow.com/questions/27678052/usage-of-the-backtick-character-in-javascript" target="_blank" rel="noopener">https://stackoverflow.com/questions/27678052/usage-of-the-backtick-character-in-javascript</a></li>
</ol>
</li>
<li><ol start="9">
<li>different between <code>undefined</code> and <code>null</code>.<br><code>undefined</code> means the object don’t have such a field.<br><code>null</code> means the object has such field but it is null, if you add 1 to <code>null</code>, it will become <code>1</code>. Super weird!!!</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`a is: <span class="subst">$&#123;a&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`PI is nearly <span class="subst">$&#123;<span class="built_in">Math</span>.max(a, b)&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> updateGradeLevelResolve = <span class="keyword">async</span> context =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; studentDAO, familyAccountDAO &#125; = context.dao</span><br><span class="line">  <span class="keyword">const</span> students = <span class="keyword">await</span> studentDAO.fetch()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (students.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      success: <span class="literal">false</span>,</span><br><span class="line">      message: <span class="string">'xxx'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*MAIN BUSINESS LOGIC*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">'Finish updating all students grade.'</span></span><br><span class="line">  <span class="keyword">let</span> warning = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> (failedStudentsList.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    message = oneLine<span class="string">`</span></span><br><span class="line"><span class="string">      Finished updating student grades, but couldn't update some.</span></span><br><span class="line"><span class="string">      See the failedStudentsList for more information.</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    warning = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    success: <span class="literal">true</span>,</span><br><span class="line">    warning,</span><br><span class="line">    message,</span><br><span class="line">    failedStudentsList,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Step3-resolve-the-mutation"><a href="#Step3-resolve-the-mutation" class="headerlink" title="Step3: resolve the mutation"></a>Step3: resolve the mutation</h2><ul>
<li><ol>
<li>In this example, there is no input arguments. If there is, we should define and pass <code>args</code> in the resolve function.<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> updateGradeLevel = &#123;</span><br><span class="line">  type: UpdateGradeLevelResult,</span><br><span class="line">  description: oneLine<span class="string">`</span></span><br><span class="line"><span class="string">    This mutation will run once a year in June before summer camp starts.</span></span><br><span class="line"><span class="string">    All student grade level will advance one year.</span></span><br><span class="line"><span class="string">    If the grade level is between 0 - 11, add 1 to the grade level.</span></span><br><span class="line"><span class="string">    If the grade level is 12, this mutation will add 1 to the grade level and</span></span><br><span class="line"><span class="string">    change EnrollmentStatus to GRADUATED.</span></span><br><span class="line"><span class="string">    If the family has another students under grade 12. the mutation will do nothing.</span></span><br><span class="line"><span class="string">    Otherwise, change student.familyAccount.status to CLOSED.</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  resolve(obj, args, context) &#123;</span><br><span class="line">    <span class="keyword">return</span> updateGradeLevelResolve(context)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h2 id="Step4-export-the-mutations-and-queries"><a href="#Step4-export-the-mutations-and-queries" class="headerlink" title="Step4 export the mutations and queries"></a>Step4 export the mutations and queries</h2><ul>
<li><ol>
<li>export in the local file.<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> queries = &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123; updateGradeLevel &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><ol start="2">
<li>import and export in the <code>index.js</code> file to expose a more standard naming of the files.<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  queries <span class="keyword">as</span> updateGradeLevelQs,</span><br><span class="line">  mutations <span class="keyword">as</span> updateGradeLevelMs,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./updateGradeLevel'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> queries = &#123;</span><br><span class="line">  ...updateGradeLevelQs,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  ...updateGradeLevelMs,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>GraphQL</category>
      </categories>
      <tags>
        <tag>ardent academy</tag>
        <tag>Computer Science</tag>
        <tag>JavaScript</tag>
        <tag>mutation</tag>
      </tags>
  </entry>
  <entry>
    <title>how-to-write-hook-based-on-graphql</title>
    <url>/2019/05/17/how-to-write-hook-based-on-graphql/</url>
    <content><![CDATA[<h1 id="General-Pratice-to-write-a-hook"><a href="#General-Pratice-to-write-a-hook" class="headerlink" title="General Pratice to write a hook"></a>General Pratice to write a hook</h1><ol>
<li>Define hooks in the hooks fields(the base methods are inplemented in base classes.)</li>
<li>write async functions to update the hooks</li>
</ol>
<h1 id="Purpose-of-writing-hooks"><a href="#Purpose-of-writing-hooks" class="headerlink" title="Purpose of writing hooks"></a>Purpose of writing hooks</h1><ol>
<li>when we define a schema in <code>types</code>, it is not always enough, sometimes we need to automatically increment some values or do somethings after or before we insert some records into the database. With the light weight hooks. We can realize such kind of functionalities.</li>
</ol>
<h1 id="Classfication-of-hooks"><a href="#Classfication-of-hooks" class="headerlink" title="Classfication of hooks"></a>Classfication of hooks</h1><ol>
<li>general types</li>
</ol>
<ul>
<li>create</li>
<li>update</li>
<li>archive</li>
</ul>
<ol start="2">
<li>happening time for every general type of hooks</li>
</ol>
<ul>
<li>before</li>
<li>after</li>
</ul>
<h2 id="Example-hook-of-updating"><a href="#Example-hook-of-updating" class="headerlink" title="Example hook of updating"></a>Example hook of updating</h2><h3 id="Step1-declare-a-update-after-hook"><a href="#Step1-declare-a-update-after-hook" class="headerlink" title="Step1: declare a update after hook"></a>Step1: declare a update after hook</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hooks: &#123;</span><br><span class="line">    update: &#123;</span><br><span class="line">      after: updatePostFavorite,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="Step2-write-function-to-implement"><a href="#Step2-write-function-to-implement" class="headerlink" title="Step2: write function to implement"></a>Step2: write function to implement</h3><ul>
<li><ol>
<li>In the base class, update hook have three parameters and they matches the three parameters in <code>updatePostFavorite function</code>. Therefore, there is no need to explicitly declare there are three variables in update hook above.</li>
</ol>
</li>
<li><ol start="2">
<li>use context.dao to update right information</li>
</ol>
</li>
<li><ol start="3">
<li>Notice that! With the same variable name <code>favoriteCount</code>, it can directly update the field <code>favoriteCount</code> in the post model. This is a feature of JS! I don’t the exact name of the this feature, maybe pass by value.<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">updatePostFavorite</span>(<span class="params">newFavorite, oldFavorite, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (newFavorite.favorited === oldFavorite.favorited) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; postFavoriteDAO, postDAO &#125; = context.dao</span><br><span class="line">  <span class="keyword">const</span> post = <span class="keyword">await</span> postDAO.get(newFavorite.postId)</span><br><span class="line">  <span class="keyword">const</span> favoriteCount = post.favoriteCount + newFavorite.favorited ? <span class="number">1</span> : <span class="number">-1</span></span><br><span class="line">  <span class="keyword">await</span> postDAO.update(newFavorite.postId, &#123; favoriteCount &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>GraphQL</category>
      </categories>
      <tags>
        <tag>ardent academy</tag>
        <tag>Computer Science</tag>
        <tag>JavaScript</tag>
        <tag>hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>inline comment in Github PR</title>
    <url>/2019/04/07/inline-comment-in-Github-PR/</url>
    <content><![CDATA[<h3 id="Github-Feature：-inline-comment-in-Github-PR"><a href="#Github-Feature：-inline-comment-in-Github-PR" class="headerlink" title="Github Feature： inline comment in Github PR"></a>Github Feature： inline comment in Github PR</h3><ul>
<li>I didn’t notice this before and I think this is a very good feature. It could give suggestions regarding specific lines.</li>
<li><p>The suggestioned lines can be commited directly. It is very convenient to use.<br><img src="https://res.cloudinary.com/dbuk0to55/image/upload/v1554689790/inlineSuggestion.png" alt="alter text"></p>
</li>
<li><p>Refer to this <a href="https://twitter.com/github/status/1053360435074949120" target="_blank" rel="noopener">link</a> for more detailed GIF.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Computer Science</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 975 - Odd Even Jump</title>
    <url>/2019/05/11/leetcode-975/</url>
    <content><![CDATA[<p>You are given an integer array A.  From some starting index, you can make a series of jumps.  The (1st, 3rd, 5th, …) jumps in the series are called odd numbered jumps, and the (2nd, 4th, 6th, …) jumps in the series are called even numbered jumps.</p>
<p>You may from index i jump forward to index j (with i &lt; j) in the following way:</p>
<ul>
<li>During odd numbered jumps (ie. jumps 1, 3, 5, …), you jump to the index j such that A[i] &lt;= A[j] and A[j] is the smallest possible value.  If there are multiple such indexes j, you can only jump to the smallest such index j.</li>
<li>During even numbered jumps (ie. jumps 2, 4, 6, …), you jump to the index j such that A[i] &gt;= A[j] and A[j] is the largest possible value.  If there are multiple such indexes j, you can only jump to the smallest such index j.<br>(It may be the case that for some index i, there are no legal jumps.)</li>
<li>A starting index is good if, starting from that index, you can reach the end of the array (index A.length - 1) by jumping some number of times (possibly 0 or more than once.)</li>
</ul>
<p>Return the number of good starting indexes.</p>
<p>###Problem link:</p>
<blockquote>
<p><a href="https://leetcode.com/problems/odd-even-jump/" target="_blank" rel="noopener">https://leetcode.com/problems/odd-even-jump/</a></p>
</blockquote>
<h2 id="1-First-Solution-TreeMap-DP"><a href="#1-First-Solution-TreeMap-DP" class="headerlink" title="1. First Solution: TreeMap + DP"></a>1. First Solution: TreeMap + DP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">oddEvenJumps</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = A.length;</span><br><span class="line">        <span class="keyword">if</span> (N &lt;= <span class="number">1</span>) <span class="keyword">return</span> N;</span><br><span class="line">        <span class="comment">// the true/false value means the that position in A can be reached in a odd/even jump</span></span><br><span class="line">        <span class="keyword">boolean</span>[] odd = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">        <span class="keyword">boolean</span>[] even = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">        odd[N - <span class="number">1</span>] = even[N - <span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        TreeMap&lt;Integer, Integer&gt; vals = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// put the last element into the map</span></span><br><span class="line">        vals.put(A[N - <span class="number">1</span>], N - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="comment">// get the current number in the given array</span></span><br><span class="line">            <span class="keyword">int</span> v = A[i];</span><br><span class="line">            <span class="comment">// first check the map if it has already have the same number</span></span><br><span class="line">            <span class="comment">// with same number, it can be reached directly with odd/even jump</span></span><br><span class="line">            <span class="keyword">if</span> (vals.containsKey(v)) &#123;</span><br><span class="line">            odd[i] = even[vals.get(v)];</span><br><span class="line">            even[i] = odd[vals.get(v)];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// if the map don't have such key</span></span><br><span class="line">                <span class="comment">//we can find a key a strictly lower/higher than the new value</span></span><br><span class="line">                Integer lower = vals.lowerKey(v);</span><br><span class="line">                Integer higher = vals.higherKey(v);</span><br><span class="line">                <span class="comment">// for even jump, previous value should be larger,</span></span><br><span class="line">                <span class="comment">// the value in the map(number with larger index) should be smaller</span></span><br><span class="line">                <span class="comment">// so the even[i] will be placed with the value in odd[vals.get(lower)]</span></span><br><span class="line">                <span class="keyword">if</span> (lower != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    even[i] = odd[vals.get(lower)];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// for odd jump, previous value should be smaller,</span></span><br><span class="line">                <span class="comment">// the value in the map(number with larger index) should be larger</span></span><br><span class="line">                <span class="comment">// so the odd[i] will be placed with the value in even[vals.get(higher)]</span></span><br><span class="line">                <span class="keyword">if</span> (higher != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    odd[i] = even[vals.get(higher)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// put the value into the map after all check</span></span><br><span class="line">        vals.put(v, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">boolean</span> b: odd)</span><br><span class="line">            <span class="keyword">if</span> (b) ans++;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Computer Science</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Check In</title>
    <url>/2019/05/09/leetcode-everyday/</url>
    <content><![CDATA[<h1 id="Check-in-Leetcode-submissions"><a href="#Check-in-Leetcode-submissions" class="headerlink" title="Check in Leetcode submissions"></a>Check in Leetcode submissions</h1><p>Today is May 9th, start from today, I will solve at least two leetcode questions every day and mark in right here. All submission will be uploaded to my Github repo.<br><a href="https://github.com/FuyaoLi2017/leetcode" target="_blank" rel="noopener">!leetcode submission repo link</a></p>
<p>For important questions and algorithms, I will try my best to summary it and post articles in my blog.</p>
<h2 id="May-9th"><a href="#May-9th" class="headerlink" title="May 9th"></a>May 9th</h2><h3 id="1-leetcode-58-Length-of-Last-Word"><a href="#1-leetcode-58-Length-of-Last-Word" class="headerlink" title="1. leetcode 58: Length of Last Word"></a>1. leetcode 58: Length of Last Word</h3><ul>
<li>link: <a href="https://leetcode.com/problems/length-of-last-word/" target="_blank" rel="noopener">https://leetcode.com/problems/length-of-last-word/</a></li>
<li>submission: <a href="https://github.com/FuyaoLi2017/leetcode/blob/master/String/leetcode_058_LengthofLastWord.java" target="_blank" rel="noopener">https://github.com/FuyaoLi2017/leetcode/blob/master/String/leetcode_058_LengthofLastWord.java</a></li>
</ul>
<h3 id="2-leetcode-59-Spiral-Matrix-II"><a href="#2-leetcode-59-Spiral-Matrix-II" class="headerlink" title="2. leetcode 59: Spiral Matrix II"></a>2. leetcode 59: Spiral Matrix II</h3><ul>
<li>link: <a href="https://leetcode.com/problems/spiral-matrix-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/spiral-matrix-ii/</a></li>
<li>submission: <a href="https://github.com/FuyaoLi2017/leetcode/blob/master/Array/leetcode_059_SpiralMatrixII.java" target="_blank" rel="noopener">https://github.com/FuyaoLi2017/leetcode/blob/master/Array/leetcode_059_SpiralMatrixII.java</a></li>
</ul>
<h3 id="3-leetcode-61-Rotate-List"><a href="#3-leetcode-61-Rotate-List" class="headerlink" title="3. leetcode 61: Rotate List"></a>3. leetcode 61: Rotate List</h3><ul>
<li>link: <a href="https://leetcode.com/problems/rotate-list/" target="_blank" rel="noopener">https://leetcode.com/problems/rotate-list/</a></li>
<li>submission: <a href="https://github.com/FuyaoLi2017/leetcode/blob/master/LinkedList/leetcode_061_RotateList.java" target="_blank" rel="noopener">https://github.com/FuyaoLi2017/leetcode/blob/master/LinkedList/leetcode_061_RotateList.java</a></li>
</ul>
<h3 id="3-leetcode-63-Unique-Paths-II"><a href="#3-leetcode-63-Unique-Paths-II" class="headerlink" title="3. leetcode 63: Unique Paths II"></a>3. leetcode 63: Unique Paths II</h3><ul>
<li>link: <a href="https://leetcode.com/problems/unique-paths-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/unique-paths-ii/</a></li>
<li>submission: <a href="https://github.com/FuyaoLi2017/leetcode/blob/master/DP/leetcode_063_UniquePathsII.java" target="_blank" rel="noopener">https://github.com/FuyaoLi2017/leetcode/blob/master/DP/leetcode_063_UniquePathsII.java</a></li>
</ul>
<h2 id="May-11th"><a href="#May-11th" class="headerlink" title="May 11th"></a>May 11th</h2><ul>
<li>leetcode 975</li>
<li>leetcode 78</li>
<li>leetcode 68</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Computer Science</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Override DAO Create and Update using flow</title>
    <url>/2019/05/29/override-DAO/</url>
    <content><![CDATA[<p>Today I meet a task, which requires me to migrate some hooks to DAO. In DAO itself, some operations are different. I also have a deeper understanding of the three dot sign in JavaScript.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassroomDAO</span> <span class="keyword">extends</span> <span class="title">DAO</span>&lt;<span class="title">Classroom</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(context) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'Classroom'</span>, context)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> create(input: Classroom) &#123;</span><br><span class="line">    <span class="keyword">const</span> checkedClassroom = checkValidDays(input)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.create(checkedClassroom)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> update(id: string, <span class="attr">input</span>: $Shape&lt;Classroom&gt;) &#123;</span><br><span class="line">    <span class="keyword">const</span> classroom = <span class="keyword">await</span> <span class="keyword">super</span>.get(id) <span class="comment">// directly use get</span></span><br><span class="line">    checkValidDays(&#123; ...classroom, ...input &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.update(id, input)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>The Code above is the the way to override ClassroomDAO functions. Defining functions with the same name from the DAO it extends will override it’s previous function.</li>
<li><code>$Shape&lt;Classroom&gt;</code> is a syntax used in Flow. It can hold part of the fields in a Model object. Even if a fields is required, it can still choose not to hold it. <a href="https://medium.com/netscape/secret-flow-types-86b2ebb30951" target="_blank" rel="noopener">https://medium.com/netscape/secret-flow-types-86b2ebb30951</a></li>
<li><code>checkValidDays({ ...classroom, ...input })</code> For this part, use three dot to destructure the <code>classroom</code> thing fetched(the whole object) and use the new fields in <code>input</code> to override part of the fields in <code>classroom</code>. In this way, <code>checkValidDays</code> function will check the expected updated result of the new classroom thing, though it is a temporary variable. The final update will be done in <code>return super.update(id, input)</code>. <code>checkValidDays</code> will mainly check whether the input <code>classroom</code> is valid or not, if not, it will throw an error. Otherwise, it won’t do anything.</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>ardent academy</tag>
        <tag>Computer Science</tag>
        <tag>JavaScript</tag>
        <tag>flow</tag>
      </tags>
  </entry>
  <entry>
    <title>Remove duplicate elements from array or linkedlist</title>
    <url>/2019/05/14/remove-duplicate-from-array-or-linkedlist/</url>
    <content><![CDATA[<p>The Key idea of remove duplicate is two pointers.</p>
<h1 id="1-Remove-Duplicates-from-Sorted-Array"><a href="#1-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="1. Remove Duplicates from Sorted Array"></a>1. Remove Duplicates from Sorted Array</h1><blockquote>
<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">https://leetcode.com/problems/remove-duplicates-from-sorted-array/</a></p>
</blockquote>
<p>Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.<br>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] != nums[i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="2-Remove-Duplicates-from-Sorted-Array-II"><a href="#2-Remove-Duplicates-from-Sorted-Array-II" class="headerlink" title="2. Remove Duplicates from Sorted Array II"></a>2. Remove Duplicates from Sorted Array II</h1><blockquote>
<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// my solution</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> previous = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> currentCount = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == previous &amp;&amp; currentCount &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                currentCount++;</span><br><span class="line">                nums[end++] = nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == previous &amp;&amp; currentCount &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                currentCount = <span class="number">1</span>;</span><br><span class="line">                nums[end++] = nums[i];</span><br><span class="line">                previous = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>// a more concise solution<br>// remove duplicates from a sorted array<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n : nums)</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">1</span> || n &gt; nums[i - <span class="number">1</span>])</span><br><span class="line">            nums[i++] = n;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove Duplicates from Sorted Array II (allow duplicates up to 2):</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> n : nums)</span><br><span class="line">      <span class="keyword">if</span> (i &lt; <span class="number">2</span> || n &gt; nums[i - <span class="number">2</span>])</span><br><span class="line">         nums[i++] = n;</span><br><span class="line">   <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="3-Remove-Duplicates-from-Sorted-List"><a href="#3-Remove-Duplicates-from-Sorted-List" class="headerlink" title="3. Remove Duplicates from Sorted List"></a>3. Remove Duplicates from Sorted List</h1><blockquote>
<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">https://leetcode.com/problems/remove-duplicates-from-sorted-list/</a></p>
</blockquote>
<p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p>
<p>Example 1:</p>
<p>Input: 1-&gt;1-&gt;2<br>Output: 1-&gt;2<br>Example 2:</p>
<p>Input: 1-&gt;1-&gt;2-&gt;3-&gt;3<br>Output: 1-&gt;2-&gt;3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// iterative</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode list = head;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">while</span>(list != <span class="keyword">null</span>) &#123;</span><br><span class="line">        	 <span class="keyword">if</span> (list.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        		 <span class="keyword">break</span>;</span><br><span class="line">        	 &#125;</span><br><span class="line">        	 <span class="keyword">if</span> (list.val == list.next.val) &#123;</span><br><span class="line">        		 list.next = list.next.next;</span><br><span class="line">        	 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        		 list = list.next;</span><br><span class="line">        	 &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// recursive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)<span class="keyword">return</span> head;</span><br><span class="line">        head.next = deleteDuplicates(head.next);</span><br><span class="line">        <span class="keyword">return</span> head.val == head.next.val ? head.next : head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-Remove-Duplicates-from-Sorted-List-II"><a href="#4-Remove-Duplicates-from-Sorted-List-II" class="headerlink" title="4. Remove Duplicates from Sorted List II"></a>4. Remove Duplicates from Sorted List II</h1><blockquote>
<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">         ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">         dummy.next = head;</span><br><span class="line">         ListNode prev = dummy;</span><br><span class="line">         ListNode cur = head;</span><br><span class="line">         <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">// use a while loop to skip all same values for current</span></span><br><span class="line">             <span class="keyword">while</span> (cur.next != <span class="keyword">null</span> &amp;&amp; cur.val == cur.next.val) &#123;</span><br><span class="line">                 cur = cur.next;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">// there is only one element without duplicate,</span></span><br><span class="line">             <span class="comment">// the code didn't enter the while loop above</span></span><br><span class="line">             <span class="comment">// can move pre to pre.next</span></span><br><span class="line">             <span class="keyword">if</span> (prev.next == cur) &#123;</span><br><span class="line">                 prev = prev.next;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">// else, point the NEXT!! pointer of pre to cur.next</span></span><br><span class="line">             <span class="keyword">else</span> &#123;</span><br><span class="line">                 prev.next = cur.next;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">// advance the cur pointer after each operation</span></span><br><span class="line">             cur = cur.next;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> dummy.next;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Computer Science</tag>
        <tag>algorithm</tag>
        <tag>array</tag>
        <tag>linkedlist</tag>
        <tag>two pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1 - Flink time system and Watermark Introduction</title>
    <url>/2021/08/15/flink-time-system-watermark/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This Flink knowledge share on time system and watermark is the first post in the Flink series based on Flink 1.13 release. This post will not only share some definitions copied from Flink official documentation, but also share some additional insights regarding time system / watermark programming based on my past experience. If you have any questions, please feel free to post questions in the comment section at the bottom.</p>
<p>The content in this post will be focusing on the topics below.</p>
<ul>
<li>Processing Time / Event Time</li>
<li>Watermark in Flink</li>
<li>The relationship between event time / timestamp assigner / watermark</li>
<li>Write a customized watermark</li>
<li>Typical watermark troubleshooting examples in Flink</li>
</ul>
<h1 id="Processing-Time-Event-Time"><a href="#Processing-Time-Event-Time" class="headerlink" title="Processing Time / Event Time"></a>Processing Time / Event Time</h1><p>Flink is a distributed data processing system. In a distributed sytem, in order to coordinate the progress of different subtasks running on different cores / machines, we need to configure the time semantic in Flink to control the advancement of data flow.</p>
<p><strong>Official documentation</strong>: <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/concepts/time/#notions-of-time-event-time-and-processing-time" target="_blank" rel="noopener">Processing time / Event time</a></p>
<h2 id="Processing-Time"><a href="#Processing-Time" class="headerlink" title="Processing Time"></a>Processing Time</h2><p>Processing time refers to the system time of the machine that is executing the respective operation. Processing time is the simplest notion of time and requires no coordination between streams and machines. It provides the best performance and the lowest latency. However, in distributed and asynchronous environments processing time does not provide determinism, because it is susceptible to the speed at which records arrive in the system (for example from the message queue), to the speed at which the records flow between operators inside the system, and to outages (scheduled, or otherwise).</p>
<h2 id="Event-Time"><a href="#Event-Time" class="headerlink" title="Event Time"></a>Event Time</h2><p>Event time is the time that each individual event occurred on its producing device. This time is typically embedded within the records before they enter Flink, and that event timestamp can be extracted from each record. In event time, the progress of time depends on the data, not on any wall clocks. Event time programs must specify how to generate Event Time Watermarks, which is the mechanism that signals progress in event time. This watermarking mechanism is described in a later section <a href="#Watermark-in-Flink">Watermark in Flink</a>.</p>
<h2 id="Coding-Additional-Notes"><a href="#Coding-Additional-Notes" class="headerlink" title="Coding / Additional Notes"></a>Coding / Additional Notes</h2><p>Latest approach as of 08/15/2021.</p>
<ul>
<li>Currently, event time is configured as the default time semantic. If you want to use processing time inside the code, you can directly use <code>System.currentTimeMillis()</code> or you can directly register <code>processingTimeTimer</code> in the process function. The old way of configuring time semantic through <code>StreamExecutionEnvironment.setStreamTimeCharacteristic()</code> is deprecated.</li>
</ul>
<p>See details in the <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/release-notes/flink-1.12/#flip-134-batch-execution-for-the-datastream-api" target="_blank" rel="noopener">release note</a>.</p>
<ul>
<li>For history archived data processing, processing time can’t work. Only event time can guarantee correct time semantic.</li>
<li>To guarantee deterministic result of stream processing, user must use event time.</li>
</ul>
<h1 id="Watermark-in-Flink"><a href="#Watermark-in-Flink" class="headerlink" title="Watermark in Flink"></a>Watermark in Flink</h1><h3 id="What-is-watermark"><a href="#What-is-watermark" class="headerlink" title="What is watermark?"></a>What is watermark?</h3><p><strong>Official documentation</strong>: <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/concepts/time/#event-time-and-watermarks" target="_blank" rel="noopener">Watermark</a><br><strong>Cloudera documentation</strong>: <a href="https://docs.cloudera.com/csa/1.2.0/flink-overview/topics/csa-watermark.html" target="_blank" rel="noopener">Using Watermark in Flink</a></p>
<p>From my understanding, watermark is a progress tracker of the current event time processing (watermark only applies for event time processing). When we emit a watermark in the data stream, it is creating an marker in the data stream, all the timers and data before the marker will be 100% fired and processed. There are different watermark strategies you can defined, they are always intended to lag behind the timestamp extracted from the latest message (In some cases, if there is high back pressure and extreme cases, this might not be true and it will lead to wrong results if you have <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/concepts/stateful-stream-processing/" target="_blank" rel="noopener">stateful data processing</a>).</p>
<h3 id="Watermark-in-parallel-streams"><a href="#Watermark-in-parallel-streams" class="headerlink" title="Watermark in parallel streams"></a>Watermark in parallel streams</h3><p>The graph below is an illustration of the watermark in a multi-parallelism operator. I have summarized some key points below.</p>
<p><img src="/images/watermark.png" alt="Flink watermark Image" width="80%"></p>
<ul>
<li>With event time processing, flink interval clock inside an operator will advance only if the ovreall watermark increases.</li>
<li>Each parallelism in an operator owns an independent watermark (For example, we have an operator of parallelism 3, it maintains <code>watermark-1</code>, <code>watermark-1</code>, <code>watermark-3</code>).</li>
<li>The overall watermark of an Flink operator is determined by minimum watermark of all parallelisms’ watermark. <code>Overall watermark = min (watermark-1, watermark-2, watermark-3)</code></li>
<li>The Event time timers in all parallelisms within an Flink operator (an transformation step) are all driven by overall watermark.</li>
<li>If a parallelism (subtask) doesn’t receive messages for a while, it can be marked as <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/dev/datastream/event-time/generating_watermarks/#dealing-with-idle-sources" target="_blank" rel="noopener"><strong>idle</strong></a> and it will quit the computation of overall watermark. For example, parallism 3 doesn’t receive message for a configured period of time (<code>withIdleness()</code> configuration), <code>watermark-3</code> is lagging behind. However, since it is marked as idle now, overall watermark = min(watermark-1, watermark-2, <del>watermark-3</del> ). As a result, the overall watermark will be pushed forward, the event time timer in parallelism 3 will be fired.</li>
</ul>
<h2 id="The-relationship-between-event-time-timestamp-assigner-watermark"><a href="#The-relationship-between-event-time-timestamp-assigner-watermark" class="headerlink" title="The relationship between event time / timestamp assigner / watermark"></a>The relationship between event time / timestamp assigner / watermark</h2><ul>
<li><strong>Event time</strong>: Event time is an time attribute carried along with the data object.</li>
<li><strong>TimestampAssigner</strong>: Timestamp assigner is a built-in abstraction of assigning timestamps to each datastream record. The timestamp is usually derived from the an attribute in the incoming message (the event time mentioned above). If not assigned explicitly, if you use Kafka/Kinesis, the Kakfa/Kinesis timestamp will be directly applied to the ingested datastream as the timestamp.</li>
<li><strong>Watermark</strong>: We pick some messages’ <code>event time timestamp</code> as the source information for the watermark generation. Programmer will further make some modification to this <code>event time timestamp</code> based on certain strategies and their use case to build a <a href="#Write-a-customized-watermark">customized watermark generator</a>. Although <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/dev/datastream/event-time/generating_watermarks/#writing-a-punctuated-watermarkgenerator" target="_blank" rel="noopener">emitting watermark for every message is possible</a>, we usually don’t emit a watermark for every message since it will cause a heavy pressure to the system.</li>
</ul>
<h1 id="Write-a-customized-watermark"><a href="#Write-a-customized-watermark" class="headerlink" title="Write a customized watermark"></a>Write a customized watermark</h1><h2 id="Official-documentation"><a href="#Official-documentation" class="headerlink" title="Official documentation"></a>Official documentation</h2><ul>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/dev/datastream/event-time/generating_watermarks/" target="_blank" rel="noopener">Watermark Generation</a></li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/dev/datastream/event-time/built_in/" target="_blank" rel="noopener">Flink build-in watermark Generation</a></li>
</ul>
<h2 id="A-full-example"><a href="#A-full-example" class="headerlink" title="A full example"></a>A full example</h2><p>This example is a periodic watermark strategy.</p>
<h3 id="Call-the-watermark-strategy"><a href="#Call-the-watermark-strategy" class="headerlink" title="Call the watermark strategy"></a>Call the watermark strategy</h3><p>Flink documentation: <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/dev/datastream/event-time/generating_watermarks/#using-watermark-strategies" target="_blank" rel="noopener">Using Watermark Strategies</a></p>
<h3 id="Watermark-class-example"><a href="#Watermark-class-example" class="headerlink" title="Watermark class example"></a>Watermark class example</h3><p>This is an example of the bounded out of orderness. Just for reference purpose.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In the main class configure the autoWatermarkInterval</span></span><br><span class="line">streamEnvironment.getConfig().setAutoWatermarkInterval(<span class="number">200</span>); <span class="comment">// this value defaults to 200ms if not configured</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPeriodicWatermarkStrategy</span> <span class="keyword">implements</span> <span class="title">WatermarkStrategy</span>&lt;<span class="title">MyEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WatermarkGenerator&lt;MyEvent&gt; <span class="title">createWatermarkGenerator</span><span class="params">(WatermarkGeneratorSupplier.Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WatermarkGenerator&lt;&gt;() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxOutOfOrderness = <span class="number">3500</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">long</span> currentMaxTimestamp;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(MyEvent event, <span class="keyword">long</span> eventTimestamp, WatermarkOutput output)</span> </span>&#123;</span><br><span class="line">                currentMaxTimestamp = Math.max(currentMaxTimestamp, eventTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPeriodicEmit</span><span class="params">(WatermarkOutput output)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// emit the watermark as current highest timestamp minus the out-of-orderness bound</span></span><br><span class="line">                output.emitWatermark(<span class="keyword">new</span> Watermark(currentMaxTimestamp - maxOutOfOrderness - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TimestampAssigner&lt;MyEvent&gt; <span class="title">createTimestampAssigner</span><span class="params">(TimestampAssignerSupplier.Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (myEventMessage, previousElementTimestamp) -&gt; extractEpochEventTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">extractEpochEventTime</span><span class="params">(MyEvent event)</span> </span>&#123;</span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.parse(event.getTimeStamp());</span><br><span class="line">        ZonedDateTime utc = ZonedDateTime.of(localDateTime, ZoneId.of(<span class="string">"UTC"</span>));</span><br><span class="line">        <span class="keyword">return</span> utc.withZoneSameInstant(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Comparison-of-different-customize-strategies-mentioned-in-the-Flink-doc"><a href="#Comparison-of-different-customize-strategies-mentioned-in-the-Flink-doc" class="headerlink" title="Comparison of different customize strategies mentioned in the Flink doc"></a>Comparison of different customize strategies mentioned in the Flink doc</h3><p>The doc below share my understanding of the tradeoffs between different watermark strategies. All of them are not perfect and might fit into some use cases. <strong>In some more complex cases, developer should invest more time to understand the system characteristic and develop some custom mechanism to ensure correct event time semantic</strong>.</p>
<p>(1) Periodic watermark strategy<br>Developer can configure a autoWatermarkInterval parameter to be N milliseconds. This will let the <code>onPeriodEmit</code> method triggered once every N milliseconds. See <a href="#Watermark-class-example">example</a> above.</p>
<table>
<thead>
<tr>
<th>Watermark Strategy</th>
<th>Description</th>
<th>Pros</th>
<th>Cons</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bounded out of orderness periodic watermark strategy</td>
<td><ul><li>compute the maximum event time (op_ts) in the incoming messages in the current parallelism (subtask)</li><li>emit a watermark (maximum_event_time - order_of_orderness - 1) every N milliseconds  </li></ul></td>
<td>With this strategy, if there is backpressure, the watermark will just slow down along with event time extracted from messages. It will not advancing too fast and causing the window to not group elements correctly.</td>
<td>If there is no new messages coming for a period of time in all subtasks, it will cause troubles. In this case, even if you configured withIdleness(), you still can’t advance the overall watermark since no new messages can be used to push the watermark forward. As a result, event time timers are stuck and can’t be fired until a new messages come in. For more info, refer to <a href="https://stackoverflow.com/questions/46432368/flink-window-does-not-process-data-at-end-of-stream" target="_blank" rel="noopener">link</a></td>
</tr>
<tr>
<td>fixed time lag periodic watermark strategy</td>
<td>* In onPeriodicEmit method, this strategy generates watermarks that are lagging processing time (System.currentTimeMillis()) by a fixed amount. It assumes that elements arrive in Flink after a bounded delay.</td>
<td>Not matter there is event or not, the watermark will always advance, so that the event time timers will not face the issue of not being able to be triggered. However, the window might be wrong.</td>
<td><ul><li>If there is no backpressure, the difference between op_ts and flink processing is usually fixed, around 4 - 5 seconds. However, when there is a lot trail file, this latency could increase to 5-6 minutes or even more. At this time, the fixed time lag is not correctly reflecting the event time advancement.</li><li>If there is high back pressure, the consumption speed is slowed down, however, the watermark is still advancing along with the processing time with a fixed delay. In such case, the fixed time lag is not correctly reflecting the event time advancement.</li></ul></td>
</tr>
</tbody>
</table>
<p>(2) Punctuated watermark strategy</p>
<ul>
<li>A punctuated watermark generator will observe the stream of events and emit a watermark whenever it sees a special element that carries watermark information. You can defined some rules to determine what is a special element.</li>
<li>It is possible to generate a watermark on every single event. However, because each watermark causes some computation downstream, an excessive number of watermarks degrades performance.<br>The pros and cons are very similar to <code>Bounded out of orderness periodic watermark strategy</code>. For simplicity, I will not repeat here.</li>
</ul>
<h1 id="Typical-watermark-troubleshooting-examples-in-Flink"><a href="#Typical-watermark-troubleshooting-examples-in-Flink" class="headerlink" title="Typical watermark troubleshooting examples in Flink"></a>Typical watermark troubleshooting examples in Flink</h1><p>The problems below are some typical problems you will meet during designing a scalable Flink architecture. The docuementations below will give some good ideas of troubleshooting.</p>
<h2 id="Watermark-skew-problem"><a href="#Watermark-skew-problem" class="headerlink" title="Watermark skew problem"></a>Watermark skew problem</h2><p>[1][2]</p>
<h2 id="Watermark-unbalanced-data"><a href="#Watermark-unbalanced-data" class="headerlink" title="Watermark unbalanced data"></a>Watermark unbalanced data</h2><p>[2]</p>
<h2 id="History-data-replay-backfill-use-case"><a href="#History-data-replay-backfill-use-case" class="headerlink" title="History data replay - backfill use case"></a>History data replay - backfill use case</h2><p>[2][3]</p>
<h2 id="Troubleshooting-backpressure"><a href="#Troubleshooting-backpressure" class="headerlink" title="Troubleshooting backpressure"></a>Troubleshooting backpressure</h2><p>[4][5][6]</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://www.ververica.com/blog/how-mitigating-event-time-skewness-can-reduce-checkpoint-failures-and-task-manager-crashes" target="_blank" rel="noopener">https://www.ververica.com/blog/how-mitigating-event-time-skewness-can-reduce-checkpoint-failures-and-task-manager-crashes</a><br>[2]<a href="https://youtu.be/X3L75Rz64Ns" target="_blank" rel="noopener">https://youtu.be/X3L75Rz64Ns</a><br>[3]<a href="https://www.ververica.com/blog/replayable-process-functions-time-ordering-and-timers" target="_blank" rel="noopener">https://www.ververica.com/blog/replayable-process-functions-time-ordering-and-timers</a><br>[4]<a href="https://www.ververica.com/blog/how-flink-handles-backpressure" target="_blank" rel="noopener">https://www.ververica.com/blog/how-flink-handles-backpressure</a> Chinese version blog: <a href="http://wuchong.me/blog/2016/04/26/flink-internals-how-to-handle-backpressure/" target="_blank" rel="noopener">http://wuchong.me/blog/2016/04/26/flink-internals-how-to-handle-backpressure/</a><br>[5]Flame graph: <a href="https://issues.apache.org/jira/browse/FLINK-13550?spm=a2c6h.12873639.0.0.7dcc4d93szHR48" target="_blank" rel="noopener">https://issues.apache.org/jira/browse/FLINK-13550?spm=a2c6h.12873639.0.0.7dcc4d93szHR48</a><br>[6]Back pressure: <a href="http://www.54tianzhisheng.cn/2019/08/26/flink-back-pressure/" target="_blank" rel="noopener">http://www.54tianzhisheng.cn/2019/08/26/flink-back-pressure/</a></p>
]]></content>
      <categories>
        <category>Flink</category>
      </categories>
      <tags>
        <tag>Apache Flink</tag>
        <tag>Watermark</tag>
        <tag>Flink time system</tag>
        <tag>Distributed System</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphQL-3 GraphQL query language</title>
    <url>/2019/04/19/graphql-3/</url>
    <content><![CDATA[<h2 id="3-1-Patterns"><a href="#3-1-Patterns" class="headerlink" title="3.1 Patterns"></a>3.1 Patterns</h2><p>GraphQL queries consist of one or more patterns which are matched agianst the big graph containing all the data on the server.</p>
<p>A pattern is expressed in terms of the relationships between objects and the fields the objects contain.</p>
<p>Multi-level hierarchies can be built because a field can also be an object which contains its own fields.</p>
<h2 id="3-2-GraphQL-methods"><a href="#3-2-GraphQL-methods" class="headerlink" title="3.2 GraphQL methods"></a>3.2 GraphQL methods</h2><ol>
<li><strong>query</strong> is used for retrieval, for reading data(see 3.3)</li>
<li><strong>mutation</strong> is used for modification, for writing data (see 3.4)</li>
<li><strong>subscription</strong> is used for notification of changed data (see 3.5)</li>
</ol>
<h2 id="3-3-GraphQL-Query"><a href="#3-3-GraphQL-Query" class="headerlink" title="3.3 GraphQL Query"></a>3.3 GraphQL Query</h2><p>To read data with graphQL, the client uses the query method.</p>
<p>In the pattern of this query, the client has to explicitly specify all the object and fields it is interested in.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">    books &#123;</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Executing the query might result in the following data, which is returned in JSON format.</li>
<li>For graphQL, query and response have the same shape. The query is comparable to a template in a template language.</li>
<li>Just like functions in JS, queries can be anonymous or named. If a query is given a name, it allows us identify it easier later on.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query myBookQuery &#123;</span><br><span class="line">    books &#123;</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-3-1-Objects"><a href="#3-3-1-Objects" class="headerlink" title="3.3.1 Objects"></a>3.3.1 Objects</h3><ul>
<li>Inside the query method, one or more objects can be retrieved.</li>
<li>An object can not be retrieved without explicitly specifying the fields that should be returned.</li>
</ul>
<h3 id="3-3-2-Fields"><a href="#3-3-2-Fields" class="headerlink" title="3.3.2 Fields"></a>3.3.2 Fields</h3><ul>
<li>Objects have fields of their own, primitives do not.</li>
<li>The types of the fields are objects, array or a primitive type.</li>
<li><p>The query language does not ditinguish between lists and single elements, such as primitives or objects. If the fields is a list, its fields are actually the fields of each element in the list.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">    books &#123;</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>If field has further fields itself, we can create a new level of nesting. The result tree gets deeper.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">    books &#123;</span><br><span class="line">        title</span><br><span class="line">        author [</span><br><span class="line">            name</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-3-3-Arguments"><a href="#3-3-3-Arguments" class="headerlink" title="3.3.3 Arguments"></a>3.3.3 Arguments</h3><ul>
<li>An argument is used to put constraints on objects. Only objects which satisfy the constraints imposed by the argument are included in the result.</li>
<li>An argument in GraphQL is comparable to a <strong>WHERE</strong> in SQL.</li>
<li>In graphQL, the arguments are identified and passed in by their name.(id in our example)</li>
</ul>
<h3 id="3-3-4-Alias"><a href="#3-3-4-Alias" class="headerlink" title="3.3.4 Alias"></a>3.3.4 Alias</h3><ul>
<li>To avoid name confilct, we cna rename a fields with an alias.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">    book_by_id (id:&quot;1234&quot;) &#123;</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">    second_book: book_by_id (id:&quot;5678&quot;) &#123;</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-3-5-Fragments"><a href="#3-3-5-Fragments" class="headerlink" title="3.3.5 Fragments"></a>3.3.5 Fragments</h3><ul>
<li>Some queries contain repeating elements. In this case, it is tedious to get consistent in the first palce and tedious to maintain consistency.</li>
<li>Repeating elements of a query can be factored out into socalled fragments.</li>
<li><p>Fragments need to be defined once (using <strong>fragment</strong> keyword) and can be applied mulitple times (using the … keyword)</p>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>We can rewrite the previous example with the following code sample.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">    book_by_id (id:&quot;1234&quot;) &#123;</span><br><span class="line">        ...bookinfo</span><br><span class="line">    &#125;</span><br><span class="line">    second_book: book_by_id (id:&quot;5678&quot;) &#123;</span><br><span class="line">        ...bookinfo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fragment bookinfo on Book &#123;</span><br><span class="line">    title</span><br><span class="line">    author &#123;</span><br><span class="line">        name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Note, that a fragment is defined for a specific type. (see section 2.3),in our example, the fragment is specific for a Book.</p>
</li>
</ul>
<h3 id="3-3-6-Inline-Fragments"><a href="#3-3-6-Inline-Fragments" class="headerlink" title="3.3.6 Inline Fragments"></a>3.3.6 Inline Fragments</h3><ul>
<li>Inline fragment are used to distinguish different types. It is similar to an <strong>instanceof</strong> operator in OOP languages.</li>
<li>Inline fragments are for ploymorphism, i.e. for <strong>interface</strong> and <strong>union</strong> types.</li>
<li>With inline fragments, we can check the type of an object at runtime.</li>
</ul>
<h4 id="Example-of-using-inline-fragment-in-interface"><a href="#Example-of-using-inline-fragment-in-interface" class="headerlink" title="Example of using inline fragment in interface"></a>Example of using inline fragment in interface</h4><ul>
<li>To access the private-owned fields of implementation type of interfaces. We need to use inline fragments.</li>
<li><p>We first define an interface and two implementation types.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Document &#123;</span><br><span class="line">    title: String,</span><br><span class="line">    text: String,</span><br><span class="line">    authors: [Author]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Book implements Document &#123;</span><br><span class="line">    id: ID!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Article implements Document &#123;</span><br><span class="line">    magazine: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Query &#123;</span><br><span class="line">    readingList: [Document]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>If we want to access the id field for Book or magazine field for article, we need to specify which type it really belongs to, we need to use inline fragment in this case.</p>
</li>
<li><p>The query format should be as follows.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">    readingList &#123;</span><br><span class="line">        title</span><br><span class="line">        text</span><br><span class="line">        authors&#123;</span><br><span class="line">            name</span><br><span class="line">        &#125;</span><br><span class="line">        ... on Book &#123;</span><br><span class="line">            id</span><br><span class="line">        &#125;</span><br><span class="line">        ... on Article &#123;</span><br><span class="line">            magazine</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>For interfaces, we use use inline fragments to access additional fields.</p>
</li>
<li>For union types, since a union in general share no fields. Inline fragment have to be used for accessing any fields in a union.</li>
</ul>
<h3 id="3-3-7-Variables"><a href="#3-3-7-Variables" class="headerlink" title="3.3.7 Variables"></a>3.3.7 Variables</h3><ul>
<li>Variables can be used to pass different values into a query. When this value needs to be changed, the query itself can stay as it is.</li>
<li><p>Format <code>{$variable name}: {type of the bookID}[!,nothing(means whether this is a required parameter)] [= default value]</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query getSpecificBook ($BookID: String = &quot;1234&quot;) &#123;</span><br><span class="line">    book_by_id (id: $bookID) &#123;</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Variable need to have a type (primitive or object type)</p>
</li>
</ul>
<h3 id="3-3-8-Directives"><a href="#3-3-8-Directives" class="headerlink" title="3.3.8 Directives"></a>3.3.8 Directives</h3><ul>
<li>Directives can be used to dynamically include or exclude a part of a query.</li>
<li>Dynamically means depending on the value of boolean variable. This boolean variable has to be decleared just like any other variables.</li>
<li>There are two types of directives: one to include (@include keyword) a part of the query and one to exclude (@skip keywords) a part of the query.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query getBooks($flag: boolean) &#123;</span><br><span class="line">    books&#123;</span><br><span class="line">        title</span><br><span class="line">        id @include(if: $flag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>The above examples includes the id fields only if the value <code>$flag</code> is <code>true</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query getBooks($flag: boolean) &#123;</span><br><span class="line">    books&#123;</span><br><span class="line">        title</span><br><span class="line">        id @skip(if: $flag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The above example is the reverse meaning for the first example.</p>
<h2 id="3-4-GraphQL-mutations"><a href="#3-4-GraphQL-mutations" class="headerlink" title="3.4 GraphQL mutations"></a>3.4 GraphQL mutations</h2><ul>
<li>The mutation method is used for modifying, adding or writing data on the server with GraphQL.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mutation &#123;</span><br><span class="line">    addBook (title: &quot;New Book&quot;) &#123;</span><br><span class="line">        id</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-5-GraphQL-Subscirption"><a href="#3-5-GraphQL-Subscirption" class="headerlink" title="3.5 GraphQL Subscirption"></a>3.5 GraphQL Subscirption</h2><ul>
<li>Modern clients need to get near real-time updates that get triggered when something changes on the server.</li>
<li>REST does not provide any built-in support for such notifications from the server; thus notifications are often realized by polling or by webhooks. You can refer more details about webhooks in the below resources.</li>
</ul>
<blockquote>
<p>Book, Webhooks - Events for REST APIs</p>
</blockquote>
<blockquote>
<p><a href="https://sendgrid.com/blog/whats-webhook/" target="_blank" rel="noopener">https://sendgrid.com/blog/whats-webhook/</a></p>
</blockquote>
<ul>
<li>With polling, the client periodically sends requests to the server. The client usually needs to poll on an endpoint that returns a list of elements and compares the retrieved list against the previously retrieved list in order to find the new elements.(expensive operation)</li>
<li>With webhooks, the server calls the client, whenever the resources becomes available. To set this up, the client first needs to register an endpoint that gets called by the server. The client needs to be able to expose this endpoint that can receive the events.</li>
</ul>
<h3 id="GraphQL-implementation"><a href="#GraphQL-implementation" class="headerlink" title="GraphQL implementation"></a>GraphQL implementation</h3><ul>
<li>GraphQL offers subscriptions as a built-in mechanism for realizing notifications.</li>
<li><p>First step: client need to send a subscription request to the graphQL API. The request specfies both the event to observe and the data.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subscription &#123;</span><br><span class="line">    bookAdded &#123;</span><br><span class="line">        id</span><br><span class="line">        title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>When to trigger?</p>
<ul>
<li>In most cases, notification is triggered by a modification of the data inside the graph, i.e. mutation. This means an event handler needs to be installed inside the implementation of the mutation.</li>
<li>In rare cases, notifcation can be triggered by an external event, which is direclty accessible inside the graph or only accessible in aggregated form. An example is sensor data, of which a single measurement may be used as a trigger, whereas the graph only contains aggredated sensor data and no single measurements.</li>
</ul>
</li>
</ul>
<h2 id="I-still-have-some-questions-regarding-how-to-implement-the-Subscriptions-with-GraphQL-Remaining-to-be-explored"><a href="#I-still-have-some-questions-regarding-how-to-implement-the-Subscriptions-with-GraphQL-Remaining-to-be-explored" class="headerlink" title="I still have some questions regarding how to implement the Subscriptions with GraphQL! Remaining to be explored!"></a>I still have some questions regarding how to implement the Subscriptions with GraphQL! Remaining to be explored!</h2>]]></content>
      <categories>
        <category>GraphQL</category>
      </categories>
      <tags>
        <tag>ardent academy</tag>
        <tag>Computer Science</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
